<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java常见的排序算法</title>
      <link href="/2022/07/19/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2022/07/19/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p> Java常见得的排序算法<br> <span id="more"></span></p><h1 id="Java常见得的排序算法"><a href="#Java常见得的排序算法" class="headerlink" title="Java常见得的排序算法"></a>Java常见得的排序算法</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h2><ol><li><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p></li><li><p>对每一对相邻元素放同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p></li></ol><p><img src="https://files.catbox.moe/a0pb5h.gif"></p><pre><code class="java">public static void main(String[] args) &#123;        int[] a = &#123;6,9,7,3,1&#125;;        for (int i = 0; i &lt; a.length-1; i++) &#123;            for (int j = 0; j &lt; a.length-i-1; j++) &#123;                if(a[j]&gt;a[j+1]) &#123;                    int temp =a[j];                    a[j] = a[j+1];                    a[j+1] =temp;                &#125;            &#125;        &#125;        System.out.println(Arrays.toString(a));&#125;</code></pre><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h2><ol><li>在长度为N的无序数组中，第一次遍历-1个数，找到最小的数与第一个元素交换</li><li>第二次遍历-2个数，找到最小的数值与第二个元素交换</li><li>重复以上步骤</li><li>第n-1次遍历，找到最小的数值与第n-1的元素交换，排序完成</li></ol><p><img src="https://files.catbox.moe/6jqfd2.gif"></p><pre><code class="java">public static void main(String[] args) &#123;        int[] a = &#123;8,2,3,17,23,85,1,9&#125;;        for (int i = 0; i &lt; a.length; i++) &#123;            //定义此轮循环最小数放置的位置            int minIndex = i;            //从第2个数依次和后面的数进行对比            for (int j = i+1; j &lt; a.length; j++) &#123;                //如果minIndex的数比j大则记录j                if(a[minIndex]&gt;a[j]) &#123;                    minIndex=j;                &#125;            &#125;            if(minIndex!=i)&#123;                int temp = a[minIndex];                a[minIndex] = a[i];                a[i] = temp;                System.out.println(&quot;每次结果&gt;&gt;&gt;&quot;+Arrays.toString(a));            &#125;            System.out.println(&quot;每轮结果===&quot;+Arrays.toString(a));        &#125;    &#125;</code></pre><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3.插入排序"></a>3.插入排序</h2><ol><li>在要排序的无序数组中，假定-1个数已经排好序，现在将第个数插入到前面的有序数列中，使得这个个数也是拍好序的，反复循环，直到全部排好顺序。插入排序也可以理解为从第二个数开始，前面的相邻的数依次两两对比，如果后面的数比前面的数小，则交换位置。(如果实在理解不了，可以类比冒泡排序，把插入排序理解为一种特殊的冒泡排序）</li></ol><p><img src="https://files.catbox.moe/hzemg8.gif"></p><pre><code class="java">public static void main(String[] args) &#123;        int[] a = &#123;87,86,82,10,30&#125;;        for (int i = 0; i &lt; a.length-1; i++) &#123;            for (int j = i+1; j &gt;0; j--) &#123;                if(a[j]&lt;a[j-1]) &#123;                    int temp = a[j];                    a[j] = a[j-1];                    a[j-1] = temp;                &#125;else&#123;                    break;                   &#125;                System.out.println(&quot;每次结果===&quot;+Arrays.toString(a));            &#125;            System.out.println(&quot;第&quot;+(i+1)+&quot;轮结果&gt;&gt;&gt;&quot;+Arrays.toString(a));        &#125;    &#125;</code></pre><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h2><p>快速排序有两种实现方式：双边循环法和挖坑法，思路如下：</p><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><ol><li>定义左右指针，并选取一个数作为基准（通常选择数组第一个）</li><li>移动右指针，如果右指针的数小于基准数，则停止移动，反之则继续移动</li><li>移动左指针，如果左指针的数大于基准数，则停止移动，反之则继续移动</li><li>当左右指针都停止移动时交换左右指针处的数</li><li>当左右两个指针停在相同位置时，交换指针处的数和基准数的位置</li><li>将数组以左右指针位置处一分为二重复上述步骤。</li></ol><pre><code class="Java">public class QuickSort &#123;    /**     * 双边循环     * @return     */    public static int pivotIndex(int[]ary,int startIndex,int endIndex) &#123;        //保存左右两个指针，从第一个元素和最后一个元素开始        int left = startIndex;        int right = endIndex;        //获取基准，一般选择数组第一个数        int pivot = ary[startIndex];        //大循环，当左右两个指针不相等时，左指针右移，右指针左移        while (left!=right) &#123;            //右边指针向左移动，当对应元素大于基准数时继续移动，小于基准数时停止移动            while(right&gt;left&amp;&amp;ary[right]&gt;=pivot) &#123;                right--;            &#125;            //左边指针向右移动，当小于基准数时继续移动，大于基准数时停止移动            while (right&gt;left&amp;&amp;ary[left]&lt;=pivot) &#123;                left++;            &#125;            //此时如果左边指针小于右边指针时；左右指针交换元素            if(left&lt;right) &#123;                int temp = ary[right];                ary[right] = ary[left];                ary[left] = temp;            &#125;        &#125;        int index = left;        //如果两个指针相等时,交换基准元素和当前位置的数        ary[startIndex] = ary[index];        ary[index] = pivot;        return index;    &#125;    public static void qucikSort(int[] ary,int startIndex,int endIndex) &#123;        if(startIndex&gt;endIndex) &#123;            return;        &#125;        int index = pivotIndex(ary,startIndex,endIndex);        qucikSort(ary, startIndex, index-1);        qucikSort(ary, index+1, endIndex);    &#125;    public static void main(String[] args) &#123;        int[] a= &#123;5,6,1,2,4,9,3&#125;;        qucikSort(a, 0, a.length-1);        System.out.println(Arrays.toString(a));    &#125;&#125;</code></pre><h5 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h5><ol><li>选取起始位置作为标记位（也就是坑），选取一个数作为基准，通常是数组第一个</li><li>从数组第二数开始依次和基准数对比，如果比基准数小，则扩大小于基准数的区间，也就是mark++,并将该数与标mark处的数交换</li><li>循环结束后，将mark处的数和基准数进行交换</li><li>以mark为界，将数组一分为二重复上述步骤</li></ol><p><img src="https://files.catbox.moe/dcwsxe.gif"></p><pre><code class="Java">/** * 单边循环 * @author MR.W */public class QucikSort2 &#123;    public static int pivotIndex(int[] ary,int startIndex,int endIndex) &#123;        int mark = startIndex;        int pivot = ary[startIndex];        for (int i = startIndex+1; i &lt;= endIndex; i++) &#123;            //如果指针指向的元素小于基准元素，干两件事情            //1.mark+1,扩大小于基准数的区间            //2.将指针所指向的数和mark位置处的数进行交换            if(ary[i]&lt;pivot) &#123;                mark++;                int temp = ary[i];                ary[i] = ary[mark];                ary[mark] = temp;            &#125;        &#125;        //当循环结束时将mark位置的数和基准数进行交换        ary[startIndex]= ary[mark];         ary[mark] = pivot;        return mark;    &#125;    public static void quickSort(int[] ary,int startIndex,int endIndex) &#123;        if(startIndex&gt;endIndex) &#123;            return;        &#125;        int index = pivotIndex(ary, startIndex, endIndex);        quickSort(ary, startIndex, index-1);        quickSort(ary, index+1, endIndex);    &#125;    public static void main(String[] args) &#123;        int [] a = &#123;7,9,1,4,8&#125;;        quickSort(a, 0, a.length-1);        System.out.println(Arrays.toString(a));    &#125;&#125;</code></pre><pre><code class="java">public static void main(String[] args) &#123;                int [] a = &#123;5,1,6,2,3&#125;;                for (int i = 0; i &lt; a.length; i++) &#123;            for (int j = 0; j &lt; a.length-1; j++) &#123;                int temp;                if(a[i]&lt;a[j]) &#123;                    temp = a[j];                    a[j] = a[i];                    a[i] = temp;                &#125;                System.out.println(&quot;每次&quot;+Arrays.toString(a));            &#125;            System.out.println(&quot;每轮&quot;+Arrays.toString(a));        &#125;        System.out.println(&quot;最后&quot;+Arrays.toString(a));    &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言概述</title>
      <link href="/2022/07/19/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/07/19/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Java语言概述</p><span id="more"></span><h1 id="第一章-Java语言概述"><a href="#第一章-Java语言概述" class="headerlink" title="第一章 Java语言概述"></a>第一章 Java语言概述</h1><h2 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h2><h3 id="Java发展简史"><a href="#Java发展简史" class="headerlink" title="Java发展简史"></a>Java发展简史</h3><p>Java是由Sun公司于1995年5月推出的)ava程序设计语言和)ava平台的总称，Java语言是可以编写跨平台，分布式应用软件的面向对象的程序设计语言。</p><p>1998年12月Sun公司发布了Java历史上最重要的一个JDK版本：JDK1.2,JSP/Servlet等规范，并且将Java一分为三。 J2M:主要用于移动设备和信息家电等设备的编程 J2SE:Java技术的核心和技术 J2EE:Java技术中应用最广泛的部分</p><h3 id="Java程序运行的机制"><a href="#Java程序运行的机制" class="headerlink" title="Java程序运行的机制"></a>Java程序运行的机制</h3><p>C语言在编写完程序后要经过编译以后才能运行，Java也是如此，Java程序要想运行，也需要经过编译的阶段，但是和C语言不同的是Java编译过后，并不会生成特定的平台机器码，而是一种与平台无关的字节码（.class文件），然而这种文件并不能直接执行，而是运行在Java虚拟机中，由Java虚拟机来解释执行。也就是说如果要运行一个Java程序，必须经历以下3个阶段。</p><p><img src="https://files.catbox.moe/cf44z5.png" alt="img"></p><p>其中Java源代码编译成字节码的过程由Java编译器完成，生成的是平台无关的字节码。这些字节码并不依赖于特定的平台，只面向Java虚拟机(Java Virtual Mechine,简称JVM,不同平台的JVM是不同的，但是他们都遵循共同的JVM规范。这也是Java跨平台的核心部分，只要为对应平台实现了对应的虚拟机，编译后的字节码就可以在不同的平台上运行。总结起来Jvva跨平台实现的核心原理包括以下两点：1.Java源代码在运行之前会先根据JVM规范生成平台无关的字节码文件，也就是class文件，字节码文件不依赖于任何平台。2.Java为不同平台实现了对应的虚拟机，JVM在加载字节码文件后由WM生成对应平台的计算机指令。</p><h3 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h3><p>1.简单性：Java在开发时借鉴了C语言的许多语法，并目屏弃了C中不好的设计，如头文件、指针、结构体、多继到等等，并目新增了垃极回收机制使得程序员无需关注内存的分配与释放，把更多的精力放在业务本身。2.面向对象：面向对象是一种编程思想，相对于面向过程来说，具备一定的优越性，简单来说这种思想将重点放在数据和对象的接口上。打个比方，一个建筑师关注的应该是建筑本身，而不是这栋建筑使用的是什么工具和流程制造的。3.分布式：Java提供了JSP/Servleti规范以后，使得Java应用程序能够通过URL打开和访问网络上的对象。4.安全性：由于Java具有分布式的特点，Java在安全方面投入了很大的精力，够防范各种攻击。5.多线程：随着互联网的发展，开发者越来越关注并发性，例如天猫双十一活动每秒的请求量数以百万计算，这不但考验服务器硬件，也考验看服务器编程语言的性能，Jv提供的多线程以及并发偏程，很大程度上解决了局并发存在的问题。6.可移植：正是因为Java提出的跨平台策略使得Java的可移植性具备了操作空间，我们知道Java对于不同的平台开发了对应的JVM,而程序运行前由Java编译器将源代码编译成了平台无关的字节码文件，因此不管是在什么平台开发的源程序，编译后都可以运行在不同平台上的JVM中。</p><h2 id="Java下载与安装"><a href="#Java下载与安装" class="headerlink" title="Java下载与安装"></a>Java下载与安装</h2><p>JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><h3 id="Java安装目录简介"><a href="#Java安装目录简介" class="headerlink" title="Java安装目录简介"></a>Java安装目录简介</h3><p>·bin:该目录下主要存放DK的各种工具命令.·conf:该目录下主要存放JDK的相关配置文件。·include:该目录下主要存放了一些平台的头文件，·jmods:该目录下主要存放了JDK的各种模块。·Iega:该目录下主要存放了JDK各模块的授权文档。·ib:该目录下主要存放了JDK工具的一些补充jar包和源代码。</p><h3 id="Java环境变量配置"><a href="#Java环境变量配置" class="headerlink" title="Java环境变量配置"></a>Java环境变量配置</h3><p>开发一个应用需要经历两个步骤：1.编写源代码2.将编写好的源代码进行编译，编译成平台无关的class文件这两个命令对应的就是JDK安装目录中bin目录下的两个应用程序：java.exe,javac.exe,现在如果要去开发一个应用程序，并使得其能正常运行，我们还需要配置环境变量。</p><p>配置环境变量的步骤如下：</p><p>1.配置JAVA_HOME</p><p>在系统环境变量中新建变量名：JAVA_HOME(不区分大小写)，变量值便是jDK的安装路径</p><p>2.配置Path</p><p>和配置JAVA_HOME一样，新建环境变量PTAH，变量值是JDK安装目录下得bin目录。如果系统变量中已经存在PATH，不要删除PATH中的值，在已有内容的后面添加“；”继续配置Java即可.</p><p>3.配置CLASSPATH</p><p>在配置好JAVA_HOME和PATH以后，继续配置CLASSPATH，变量值为JDK安装路面下得lib目录。需要注意的是，从JDK 1.5以后，CLASSPATH是可以不配置的。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><h3 id="记事本编写HelloWorld"><a href="#记事本编写HelloWorld" class="headerlink" title="记事本编写HelloWorld"></a>记事本编写HelloWorld</h3><ol><li>在D盘根目录新建一个记事本，命名为hello</li><li>在记事本输入以下代码</li></ol><pre><code>class Hello&#123;   public static void main(String[] args)&#123;     System.out.println(&quot;Hello World!&quot;);   &#125;&#125;</code></pre><ol><li>保存后关闭文件，并修改文件的拓展名为.java</li><li>打开cmd，进入D盘，hello所在位置</li><li>输入命令对源文件进行编译：javac Hello.java</li><li>输入命令运行Java：java Hello</li></ol><p><strong>注意：此处的命令并不区分大小写，当使用javac编译完程序后使用java命令运行程序，此时我们只写文件名即可，并不需要写扩展名</strong>按照以上步骤操作以后你会看到窗口中打印了Hello World,自此，我们已经开发了自己的第一个Java程序，下面我们对上述代码进行简单的解释：</p><p>1.class:是java中的关键字，用于声明一个类，Hello表示是类名2.public static是修饰符3.void表示方法没有返回值</p><p>4.main表示方法名，main方法也是程序的入口5.System.out.println表示在控制台打印，其中System首字母大写</p><h3 id="Java源文件命名规则"><a href="#Java源文件命名规则" class="headerlink" title="Java源文件命名规则"></a>Java源文件命名规则</h3><p>Java源文件的命名需要遵守以下规则1.文件的扩展名或后缀名必须是java2.文件名必须和类中pulic修饰的类名称相同</p><h3 id="对Java的认识"><a href="#对Java的认识" class="headerlink" title="对Java的认识"></a>对Java的认识</h3><p>Java是一门面向对象的编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等。</p><h3 id="Java的平台无关性是怎么实现的"><a href="#Java的平台无关性是怎么实现的" class="headerlink" title="Java的平台无关性是怎么实现的"></a>Java的平台无关性是怎么实现的</h3><p>1.什么是平台无关性</p><p>平台无关性就是一种语言在计算机上的运行不受平台的约束，一次编译，到处执行（Write Once ,Run Anywhere）。</p><p>也就是说，用Java创建的可执行二进制程序，能够不加改变的运行于多个平台。</p><p>平台无关性好处</p><p>作为一门平台无关性语言，无论是在自身发展，还是对开发者的友好度上都是很突出的。</p><p>因为其平台无关性，所以Java程序可以运行在各种各样的设备上，尤其是一些嵌入式设备，如打印机、扫描仪、传真机等。随着5G时代的来临，也会有更多的终端接入网络，相信平台无关性的Java也能做出一些贡献。</p><p>对于Java开发者来说，Java减少了开发和部署到多个平台的成本和时间。真正的做到一次编译，到处运行。2.平台无关性的实现</p><p>对于Java的平台无关性的支持，就像对安全性和网络移动性的支持一样，是分布在整个Java体系结构中的。其中扮演者重要的角色的有Java语言规范、Class文件、Java虚拟机（JVM）等。</p><p><strong>Java到底是是如何运行起来的</strong></p><p>在计算机世界中，计算机只认识0和1，所以，真正被计算机执行的其实是由0和1组成的二进制文件。日常开发使用的C、C++、Java、Python等都属于高级语言，而非二进制语言。所以，想要让计算机认识我们写出来的Java代码，那就需要把他”翻译”成由0和1组成的二进制文件。这个过程就叫做编译。负责这一过程的处理的工具叫做编译器。</p><p>在Java平台中，想要把Java文件，编译成二进制文件，需要经过两步编译，前端编译和后端编译：</p><p>前端编译主要指与源语言有关但与目标机无关的部分。Java中，我们所熟知的javac的编译就是前端编译。除了这种以外，我们使用的很多IDE，如eclipse，idea等，都内置了前端编译器。主要功能就是把.java代码转换成.class代码。这里提到的.class代码，其实就是Class文件。</p><p>后端编译主要是将中间代码再翻译成机器语言。Java中，这一步骤就是Java虚拟机来执行的。</p><p><strong>Java虚拟机</strong></p><p>所谓平台无关性，就是说要能够做到可以在多个平台上都能无缝对接。但是，对于不同的平台，硬件和操作系统肯定都是不一样的。</p><p>对于不同的硬件和操作系统，最主要的区别就是指令不同。比如同样执行a+b，A操作系统对应的二进制指令可能是10001000，而B操作系统对应的指令可能是11101110。那么，想要做到跨平台，最重要的就是可以根据对应的硬件和操作系统生成对应的二进制指令。</p><p>而这一工作，主要由我们的Java虚拟机完成。虽然Java语言是平台无关的，但是JVM确实平台有关的，不同的操作系统上面要安装对应的JVM。Java之所以可以做到跨平台，是因为Java虚拟机充当了桥梁。他扮演了运行时Java程序与其下的硬件和操作系统之间的缓冲角色。</p><p><strong>字节码</strong></p><p>各种不同的平台的虚拟机都使用统一的程序存储格式——字节码（ByteCode）是构成平台无关性的另一个基石。Java虚拟机只与由自己码组成的Class文件进行交互。</p><p>我们说Java语言可以Write Once ,Run Anywhere。这里的Write其实指的就是生成Class文件的过程。</p><p>因为Java Class文件可以在任何平台创建，也可以被任何平台的Java虚拟机装载并执行，所以才有了Java的平台无关性。</p><p><strong>Java语言规范</strong></p><p>已经有了统一的Class文件，以及可以在不同平台上将Class文件翻译成对应的二进制文件的Java虚拟机，Java就可以彻底实现跨平台了吗？</p><p>其实并不是的，Java语言在跨平台方面也是做了一些努力的，这些努力被定义在Java语言规范中。</p><p>比如，Java中基本数据类型的值域和行为都是由其自己定义的。而C/C++中，基本数据类型是由它的占位宽度决定的，占位宽度则是由所在平台决定的。所以，在不同的平台中，对于同一个C++程序的编译结果会出现不同的行为。</p><p>举一个简单的例子，对于int类型，在Java中，int占4个字节，这是固定的。</p><p>但是在C++中却不是固定的了。在16位计算机上，int类型的长度可能为两字节；在32位计算机上，可能为4字节；当64位计算机流行起来后，int类型的长度可能会达到8字节。</p><p>通过保证基本数据类型在所有平台的一致性，Java语言为平台无关性提供强了有力的支持。</p><p><strong>Java语言规范</strong></p><p>通过规定Java语言中基本数据类型的取值范围和行为</p><p><strong>Class文件</strong></p><p>所有Java文件要编译成统一的Class文件</p><p><strong>Java虚拟机</strong></p><p>通过Java虚拟机将Class文件转成对应平台的二进制文件等</p><p>Java的平台无关性是建立在Java虚拟机的平台有关性基础之上的，是因为Java虚拟机屏蔽了底层操作系统和硬件的差异。</p>]]></content>
      
      
      <categories>
          
          <category> 后端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2022/07/15/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/15/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Java基础</p><span id="more"></span><h1 id="一-Java概述"><a href="#一-Java概述" class="headerlink" title="一.Java概述"></a>一.Java概述</h1><h3 id="Java跨平台实现"><a href="#Java跨平台实现" class="headerlink" title="Java跨平台实现"></a>Java跨平台实现</h3><ol><li>Java源代码在编写过后，会编译成平台无关的字节码文件，该文件不依赖于任何平台</li><li>Java针对不同的平台开发了不同的JVM，当程序运行时由JVM将字节码文件转换成对应平台的指令</li></ol><h3 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h3><ol><li>简单性</li><li>跨平台</li><li>分布式</li><li>面向对象</li><li>安全性</li><li>多线程</li></ol><h3 id="Java源代码中注意事项"><a href="#Java源代码中注意事项" class="headerlink" title="Java源代码中注意事项"></a>Java源代码中注意事项</h3><ol><li>Java源文件的命名和类名一致，并且首字符大写，如果有多个单词，所有单词的首字母均大写。</li><li>main()写法固定，public static void main(String[] args);</li><li>System中首字母大写</li></ol><h3 id="技术名词"><a href="#技术名词" class="headerlink" title="技术名词"></a>技术名词</h3><p>JDK(Java Develop Kit):Java 开发工具</p><p>JRE(Java Runtime Environment)：Java 运行环境</p><p>JVM(Java Virtual machine )：Java虚拟机</p><h1 id="二-Java标识符和运算符"><a href="#二-Java标识符和运算符" class="headerlink" title="二.Java标识符和运算符"></a>二.Java标识符和运算符</h1><p>Java是一门强类型语言，所谓的强类型语言，可以理解为包含以下2层含义：</p><ol><li>所有的变量都必须先声明，后使用</li><li>变量的类型一旦确定，那么变量的值必须和数据类型相匹配</li></ol><h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><p>标识符：类名、方法名、变量名统称为标识符</p><ol><li>可以包含数字、字母、下划线，$，不能以数字开头</li><li>不能包含除了_，$以外的特殊字符。</li><li>不能使用Java关键字</li></ol><table><thead><tr><th>abstract</th><th>continue</th><th>for</th><th>new</th><th>switch</th></tr></thead><tbody><tr><td>assert</td><td>default</td><td>if</td><td>package</td><td>synchronized</td></tr><tr><td>boolean</td><td>do</td><td>goto</td><td>private</td><td>this</td></tr><tr><td>break</td><td>double</td><td>implements</td><td>protected</td><td>throws</td></tr><tr><td>byte</td><td>else</td><td>import</td><td>public</td><td>throw</td></tr><tr><td>case</td><td>enum</td><td>instanceof</td><td>return</td><td>transient</td></tr><tr><td>catch</td><td>extends</td><td>int</td><td>short</td><td>try</td></tr><tr><td>char</td><td>final</td><td>interface</td><td>static</td><td>void</td></tr><tr><td>class</td><td>finally</td><td>long</td><td>strictfp</td><td>volatile</td></tr><tr><td>const</td><td>float</td><td>native</td><td>super</td><td>while</td></tr></tbody></table><p><strong>示例</strong></p><pre><code class="java">/** * 标识符的命名规范 * 1. * 2.不能包含除了$,_以外的字符 * 3.不能包含关键字 * @author MR.W */public class Identifier &#123;    //错误原因：不能以数字开头//    int 1ab;    int _abc;    int abc_;    int a_bc;    int abc1;    int $abd;    int ab$d;    int abd$;    //错误原因，包含除了$，_以外的特殊符号//    int abc-;//    错误原因，使用了Java关键字//    int instanceof;    public void abc() &#123;    &#125;&#125;</code></pre><h2 id="Java命名方式"><a href="#Java命名方式" class="headerlink" title="Java命名方式"></a>Java命名方式</h2><ol><li>帕斯卡命名法：所有单词首字母均大写。适用于类名，例如：StudentManager</li><li>驼峰命名法：第一个单词的首字母小写，如果有多个但是，其余单词首字母均大写，适用于方法名，变量名。例如：studentAge，studentGender</li></ol><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><ol><li>基本类型：byte short int long float double boolean char</li><li>引用类型: 数组， 类，接口</li></ol><h2 id="变量的声明和初始化"><a href="#变量的声明和初始化" class="headerlink" title="变量的声明和初始化"></a>变量的声明和初始化</h2><pre><code>数据类型  变量名 [=值];</code></pre><h2 id="Java数据类型-1"><a href="#Java数据类型-1" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><table><thead><tr><th>整型</th><th>字节长度</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>-128~127</td></tr><tr><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td>int</td><td>4</td><td>-2 147 483 648~2 147 483 647</td></tr><tr><td>long</td><td>8</td><td>-9 223 372 036 854 775 808~9 223 372 036 854 775 807</td></tr></tbody></table><table><thead><tr><th>浮点型</th><th>字节长度</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>±3.402 823 47E+38F（有效位数为6-7位）</td></tr><tr><td>double</td><td>8</td><td>±1.797 693 134 862 315 70E+308（有效位数为15位）</td></tr></tbody></table><table><thead><tr><th>布尔型</th><th>取值范围</th></tr></thead><tbody><tr><td>boolean</td><td>true/false</td></tr></tbody></table><table><thead><tr><th>字符型</th><th>取值范围</th></tr></thead><tbody><tr><td>char</td><td>0-65535</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ol><li>低类型–&gt;高类型：自动转</li><li>高类型–&gt;低类型：强制转换</li></ol><pre><code>int a = 10;byte b = (byte) a;</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符类型"><a href="#运算符类型" class="headerlink" title="运算符类型"></a>运算符类型</h3><ol><li><p>算数运算符</p></li><li><p>赋值运算符</p></li><li><p>位运算符</p></li><li><p>比较运算符</p></li><li><p>逻辑运算符</p></li></ol><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table><thead><tr><th>运算符说明</th><th>Java运算符</th></tr></thead><tbody><tr><td>分隔符</td><td>, [] () {} . ;</td></tr><tr><td>单目运算符</td><td>++ –  ~  ！</td></tr><tr><td>强制类型转换运算符</td><td>(type)</td></tr><tr><td>乘法/除法/求余</td><td>*/ %</td></tr><tr><td>加法/减法</td><td>+-</td></tr><tr><td>移位运算符</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td>关系运算</td><td>&lt; &lt;= &gt;= &gt; instanceof</td></tr><tr><td>等价运算符</td><td>== !=</td></tr><tr><td>按位与</td><td>&amp;</td></tr><tr><td>按位异或</td><td>^</td></tr><tr><td>按位或</td><td>|</td></tr><tr><td>条件与</td><td>&amp;&amp;</td></tr><tr><td>条件或</td><td>||</td></tr><tr><td>三目运算符</td><td>?:</td></tr><tr><td>赋值</td><td>= += -= *= /= &amp;= |= ^= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td></tr></tbody></table><h1 id="三-流程控制"><a href="#三-流程控制" class="headerlink" title="三.流程控制"></a>三.流程控制</h1><ol><li>顺序结构：通常而言，我们的代码，根据书写的顺序在上而下执行。</li><li>分支结构：对多种可能出现的情况进行判断：单分支，双分支，多分支</li><li>循环结构：同一段代码片段多次执行</li></ol><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if-单分支"><a href="#if-单分支" class="headerlink" title="if 单分支"></a>if 单分支</h3><pre><code class="java">if(逻辑表达式)&#123;    //代码&#125;</code></pre><h3 id="if-双分支"><a href="#if-双分支" class="headerlink" title="if 双分支"></a>if 双分支</h3><pre><code>if(逻辑表达式)&#123;    //逻辑表达式结果为true，执行此处的代码&#125;else&#123;    //逻辑表达式不成立，则执行此处的代码&#125;</code></pre><h3 id="if多分支"><a href="#if多分支" class="headerlink" title="if多分支"></a>if多分支</h3><pre><code>if(逻辑表达式)&#123;&#125;else if(逻辑表达式)&#123;&#125;else if(逻辑表达式)&#123;&#125;else&#123;&#125;</code></pre><ol><li>请将101转换成二进制，并将二进制的前3位替换为1，并求出原码</li><li>请输入一个年份，并判断是否是闰年</li><li>请输入一个数，判断是否是质数</li></ol><p><a href="https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369#">https://www.yuque.com/docs/share/8290264f-2175-46ce-8b20-711eac7ac369?#</a> 《第1章 Java语言概述》密码：syl5</p><p><a href="https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965#">https://www.yuque.com/docs/share/b9feb7da-7c3c-4ccb-8542-52a34ad5d965?#</a> 《第2章 Java数据类型和运算符》密码：ekp0</p><p><a href="https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39#">https://www.yuque.com/docs/share/89bb9cac-ccd1-44dd-b2e2-e11933c44c39?#</a> 《第3章 流程控制》密码：zk84</p><p><a href="https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653#">https://www.yuque.com/docs/share/5b051183-1e6a-4c80-904f-17070f1c9653?#</a> 《第4章 数组》密码：mg6w</p>]]></content>
      
      
      <categories>
          
          <category> 后端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十二)JavaScript BOM与DOM</title>
      <link href="/2022/07/08/%E5%8D%81%E4%BA%8C-JavaScript-BOM%E4%B8%8EDOM/"/>
      <url>/2022/07/08/%E5%8D%81%E4%BA%8C-JavaScript-BOM%E4%B8%8EDOM/</url>
      
        <content type="html"><![CDATA[<p>(十二)JavaScript BOM与DOM</p><span id="more"></span><h1 id="第十二章-JavaScript-BOM与DOM"><a href="#第十二章-JavaScript-BOM与DOM" class="headerlink" title="第十二章 JavaScript BOM与DOM"></a>第十二章 JavaScript BOM与DOM</h1><h2 id="BOM（borwser-object-Model）"><a href="#BOM（borwser-object-Model）" class="headerlink" title="BOM（borwser object Model）"></a>BOM（borwser object Model）</h2><h4 id="浏览器对象模型"><a href="#浏览器对象模型" class="headerlink" title="浏览器对象模型"></a>浏览器对象模型</h4><ul><li><ul><li>使用对象描述浏览器的各个部分</li><li>BOM提供与浏览器窗口交互的对象</li><li>BOM主要用于管理窗口与窗口之间的通讯，所以核心对象是窗口（window）</li></ul></li><li><p>BOM里有什么</p></li><li><ul><li><p>图示</p><p><img src="https://files.catbox.moe/ccpeyl.png" alt="img"></p></li></ul></li><li><ul><li>与浏览器进行交互的一些对象</li></ul></li><li><ul><li><ul><li>移动，调整浏览器大小的window对象</li><li>用于导航的location对象history</li><li>获取浏览器，用户屏幕信息的navigator与screen对象</li></ul></li></ul></li></ul><h5 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h5><ul><li><ul><li>open()方法用于打开一个新窗口或查找一个窗口</li></ul></li><li><ul><li><ul><li>语法</li><li>window.open(url,name,feature,replace)</li></ul></li></ul></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>声明要在新窗口中显示文档的url</td></tr><tr><td>name</td><td>该字符声明了新窗口的名称。这个名称可以用作标记 和的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</td></tr><tr><td>feature</td><td>声明了新窗口要显示的标准浏览器的特征</td></tr><tr><td>replace</td><td>一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目。false - URL 在浏览历史中创建新的条目。</td></tr></tbody></table><ul><li><p>案例 打开新窗口控制其外观样式</p><p><img src="https://files.catbox.moe/9cmg9b.png" alt="img"></p></li><li><p>窗口特征表</p></li></ul><table><thead><tr><th>channelmode=yes|no|1|0</th><th>是否使用剧院模式显示窗口。默认为 no。</th></tr></thead><tbody><tr><td>directories=yes|no|1|0</td><td>是否添加目录按钮。默认为 yes。</td></tr><tr><td>fullscreen=yes|no|1|0</td><td>是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。</td></tr><tr><td>height=pixels</td><td>窗口文档显示区的高度。以像素计。</td></tr><tr><td>left=pixels</td><td>窗口的 x 坐标。以像素计。</td></tr><tr><td>location=yes|no|1|0</td><td>是否显示地址字段。默认是 yes。</td></tr><tr><td>menubar=yes|no|1|0</td><td>是否显示菜单栏。默认是 yes。</td></tr><tr><td>resizable=yes|no|1|0</td><td>窗口是否可调节尺寸。默认是 yes。</td></tr><tr><td>scrollbars=yes|no|1|0</td><td>是否显示滚动条。默认是 yes。</td></tr><tr><td>status=yes|no|1|0</td><td>是否添加状态栏。默认是 yes。</td></tr><tr><td>titlebar=yes|no|1|0</td><td>是否显示标题栏。默认是 yes。</td></tr><tr><td>toolbar=yes|no|1|0</td><td>是否显示浏览器的工具栏。默认是 yes。</td></tr><tr><td>top=pixels</td><td>窗口的 y 坐标。</td></tr><tr><td>width=pixels</td><td>窗口的文档显示区的宽度。以像素计。</td></tr></tbody></table><ul><li><p>setInterval()每隔指定的毫秒运行指定的代码/函数</p></li><li><p>案例</p><p><img src="https://files.catbox.moe/gezs9p.png" alt="img"></p></li><li><p>setTimeout()经过指定毫秒数运行一次指定的代码/函数</p></li><li><p>案例</p><p><img src="https://files.catbox.moe/r0dclo.png" alt="img"></p></li><li><p>location地址栏对象</p></li><li><ul><li>href：设置或获取整个URL为字符串</li></ul></li><li><p>案例</p><p><img src="https://files.catbox.moe/rk4u5p.png" alt="img"></p></li><li><p>reload()：重新加载</p></li><li><p>replace():用新文档替换当前文档</p></li><li><p>案例</p><p><img src="https://files.catbox.moe/e2r3lh.png" alt="img"></p></li></ul><h5 id="屏幕对象（Screen）用来获取电脑屏幕的一些数据"><a href="#屏幕对象（Screen）用来获取电脑屏幕的一些数据" class="headerlink" title="屏幕对象（Screen）用来获取电脑屏幕的一些数据"></a>屏幕对象（Screen）用来获取电脑屏幕的一些数据</h5><ul><li><ul><li>availHeight：获取系统屏幕的工作区高度（浏览器的页面高度）</li></ul></li><li><ul><li><p>案例</p><p><img src="https://files.catbox.moe/k600si.png" alt="img"></p></li></ul></li><li><p>availWidth：获取系统屏幕的工作区宽度（浏览器页面宽度）</p></li><li><p>height：获取屏幕的垂直分辨率</p></li><li><p>width：获取屏幕的水平分辨率</p></li><li><ul><li><p>案例</p><p><img src="https://files.catbox.moe/oxiqgh.png" alt="img"></p></li></ul></li></ul><h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><h4 id="文档对象模型（document）"><a href="#文档对象模型（document）" class="headerlink" title="文档对象模型（document）"></a>文档对象模型（document）</h4><ul><li>当一个html页面加载到浏览器的时候，那么浏览器会为每个标签都创建一个对应的对象，描述该标签的所有信息</li><li>我们此时所看到的网页信息实际上就是看到了这些标签的对象信息，如果我们需要操作页面的数据，我们就可以通过这些标签对象进行操作</li><li>图例</li><li><img src="https://files.catbox.moe/29phbz.png" alt="img"></li></ul><h4 id="用来获取页面节点的方法"><a href="#用来获取页面节点的方法" class="headerlink" title="用来获取页面节点的方法"></a>用来获取页面节点的方法</h4><ul><li><p>获取页面的所有节点：document.all；</p></li><li><p>nodeName:节点名字</p><pre><code>var    elements =document.all;alert(elements);for(var index = 0;index&lt;elements.length;index++)&#123;   alert(&quot;节点名：&quot;+elements[index].nodeName);&#125;</code></pre></li><li><p>通过标签属性找节点</p></li><li><ul><li><p>document.getElementById(“标签属性id”);</p></li><li><p>例</p><pre><code>&lt;div id=&quot;test&quot;&gt;window.onload=function()&#123;    var    a = document.getElementById(&quot;test&quot;);    alert(a);&#125;;</code></pre></li></ul></li><li><p>通过标签名获取节点</p></li><li><ul><li><p>document.getElementsByTagName(标签名);</p></li><li><p>注：返回的是一个数组</p></li><li><p>例</p><pre><code>&lt;div&gt;&lt;/div&gt;window.onload=function()&#123;     var    a = document.getElementsByName(&quot;div&quot;);     alert(a);&#125;;</code></pre></li></ul></li><li><p>通过标签的Name属性获取节点</p></li><li><ul><li><p>document.getElementByName(“标签的name属性值”);</p></li><li><p>注：返回的是一个数组</p></li><li><p>例</p><pre><code>&lt;div name=&quot;ElName&quot;&gt;&lt;/div&gt;window.onload=function()&#123;    var    a = document.getElementsByName(&quot;ElName&quot;);    alert(a);&#125;;</code></pre></li></ul></li><li><p>通过关系找节点</p></li><li><ul><li>document可以通过一个节点，找到与它有关的节点</li></ul></li><li><ul><li><ul><li><p>parentNode：获取当前元素的父节点</p></li><li><p>例</p><pre><code>window.onload=function()&#123;    var    a = document.getElementById(&quot;test&quot;);    var    f = a.parentNode;    alert(f);    f.innerHTML=&quot;找到我了&quot;;&#125;;</code></pre></li></ul></li></ul></li><li><p>childNodes：获取当前元素的所有下一级子元素</p><pre><code>window.onload=function()&#123;var    a = document.getElementById(&quot;test&quot;);var    all = a.childNodes;for(var    index = 0;index&lt;all.length;index++)&#123;    alert(all[index].nodeName);    if(all[index].nodeType==1)&#123;       all[index].style.background=&quot;red&quot;;    &#125; &#125;&#125;;</code></pre></li></ul><table><thead><tr><th><strong>类型</strong></th><th><strong>nodeType常数值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Node.ELEMENT_NODE</td><td>1</td><td>元素节点</td></tr><tr><td>Node.ATTRIBUTE_NODE</td><td>2</td><td>属性节点</td></tr><tr><td>Node.TEXT_NODE</td><td>3</td><td>文本节点</td></tr><tr><td>Node.CDATA_SECTION_NODE</td><td>4</td><td>字符数据节点（文本不会被解析器解析）</td></tr><tr><td>Node.ENTITY_REFERENCE_NODE</td><td>5</td><td>实体引用节点</td></tr><tr><td>Node.ENTITY_NODE</td><td>6</td><td>实体节点</td></tr><tr><td>Node.PROCESSING_INSTRUCTION_NODE</td><td>7</td><td>处理指令节点</td></tr><tr><td>Node.COMMENT_NODE</td><td>8</td><td>注释节点</td></tr><tr><td>Node.DOCUMENT_NODE</td><td>9</td><td>文档节点（DOM树的根节点）</td></tr><tr><td>Node.DOCUMENT_TYPE_NODE</td><td>10</td><td>向为文档定义的实体提供接口</td></tr><tr><td>Node.DOCUMENT_FRAGMENT_NODE</td><td>11</td><td>表示邻接节点和它们的子树。</td></tr><tr><td>Node.NOTATION_NODE</td><td>12</td><td>代表一个符号在DTD中的声明</td></tr></tbody></table><ul><li><p>firstChild：获取当前节点的第一个子节点</p></li><li><p>lastChild：获取当前节点的最后一个字节点</p></li><li><p>nextElementSibling：获取当前节点的下一个节点（兄弟节点）</p></li><li><p>previousElementSibling：获取当前节点的上一个节点（兄弟节点）</p></li><li><p>创建，删除，插入节点</p></li><li><ul><li><ul><li>创建：var 节点 = document.creatElement(“标签名”);创建新元素节点</li><li>节点 .setAttribute(“属性名”,”属性值”);</li><li>节点.appendChild(e);将某个节点添加到该节点的最后位置</li><li>节点.insertBefore(e,child);将某个新节点添加到该节点中，某个子节点之前</li><li>节点.removeChild(要删除的子节点)；删除指定的直接点</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>节点必须为直接父节点</li></ul></li></ul></li></ul></li><li><ul><li><ul><li><p>例</p><pre><code>var    trNode = document.createElement(&quot;tr&quot;);var tdNode = document.createElement(&quot;td&quot;);trNode.appendChild(tdNode);</code></pre></li></ul></li></ul></li><li><p>利用节点操作css</p></li><li><ul><li>我们可以通过上边获取节点的方式获取到节点，我们可以通过节点对象去操作标签的的样式</li><li>语法</li></ul></li><li><ul><li><ul><li>节点.style.要操作的样式=”值”;</li></ul></li></ul></li></ul><h4 id="JavaScript中常用的事件"><a href="#JavaScript中常用的事件" class="headerlink" title="JavaScript中常用的事件"></a>JavaScript中常用的事件</h4><ul><li><p>js有可以通过某些方式触发函数的执行，我们把这种方式称之为事件</p></li><li><p>点击事件（onclick()）</p></li><li><ul><li><p>案例</p><pre><code>&lt;script&gt;function    sp(elementid)&#123;var    a = document.getElementById(elementid);a.style.background=&quot;red&quot;;&#125;&lt;/script&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;div    id=&quot;test&quot; nzmd=&quot;ElName&quot;    style=&quot;height:100px;&quot;&gt;               &lt;p    id=&quot;elp&quot; onclick=&quot;sp(&#39;elp&#39;)&quot;&gt;1&lt;/p&gt;        &lt;a id=&quot;ela&quot;    onclick=&quot;sp(&#39;ela&#39;)&quot;&gt;2&lt;/a&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre></li></ul></li><li><p>鼠标进入事件（onmouseover(),onmousemove()）</p></li><li><p>鼠标离开事件（onmouseout()）</p></li></ul><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;      .box&#123;        width: 200px;        height: 500px;        display: none;      &#125;      .boxOne&#123;        background-color: red;      &#125;      .boxTwo&#123;        background-color: aqua;      &#125;    &lt;/style&gt;    &lt;script&gt;      function show(idName) &#123;        //根据id获取要显示的元素        var el = document.getElementById(idName);        el.style.display = &quot;block&quot;;      &#125;      function hide(idName) &#123;        var el = document.getElementById(idName);        el.style.display = &quot;none&quot;;      &#125;    &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;!--悬停事件：鼠标进入元素后触发--&gt;    &lt;!--鼠标离开事件：鼠标离开元素后触发--&gt;    &lt;nav&gt;      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot;&gt;导航一&lt;/a&gt;      &lt;a href=&quot;#&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot;&gt;导航二&lt;/a&gt;    &lt;/nav&gt;    &lt;div class=&quot;box boxOne&quot; onmousemove=&quot;show(&#39;one&#39;)&quot; onmouseout=&quot;hide(&#39;one&#39;)&quot; id=&quot;one&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box boxTwo&quot; onmousemove=&quot;show(&#39;two&#39;)&quot; onmouseout=&quot;hide(&#39;two&#39;)&quot; id=&quot;two&quot;&gt;&lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><p>获取焦点（onfocus()）</p></li><li><p>失去焦点（onblur()）</p></li><li><ul><li><p>案例</p><pre><code>&lt;script&gt;function    of()&#123;var    a = document.getElementById(&quot;eli&quot;);   a.value=&quot;&quot;;&#125;function    ob()&#123;var    a = document.getElementById(&quot;eli&quot;);   a.value=&quot;有字&quot;;&#125;&lt;/script&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;input    type=&quot;text&quot; onfocus=&quot;of()&quot; onblur=&quot;ob()&quot;    id=&quot;eli&quot;/&gt;&lt;/body&gt;&lt;script&gt;window.onload=function()&#123;    var    a = document.getElementById(&quot;eli&quot;);    a.onfocus=function()&#123;        a.placeholder=&quot;&quot;;   &#125;  a.onblur=function()&#123;      a.placeholder=&quot;有字&quot;;  &#125;&#125;&lt;/script&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;input    type=&quot;text&quot; id=&quot;eli&quot; placeholder=&quot;hello&quot;/&gt;&lt;/body&gt;</code></pre></li></ul></li><li><p>滚动事件(onscroll())</p></li><li><ul><li><p>案例</p><pre><code>&lt;style&gt;               #test&#123;width:100%;height:100px;overflow:scroll;border:1px    solid black;&#125;    &lt;/style&gt;&lt;script&gt;window.onload=function()&#123;var    a = document.getElementById(&quot;test&quot;);a.onscroll=function()&#123;a.innerHTML=&quot;aaaaaa&quot;;&#125;;&#125;;&lt;/script&gt;&lt;title&gt;无标题文档&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;div    id=&quot;test&quot; &gt;               啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊    &lt;/div&gt;</code></pre></li></ul></li><li><p>键盘按下并松开（onkeypress()）</p></li><li><p>键盘按下事件（onkeydown()）</p></li><li><ul><li>onkeypress 和 onkeydown 是有区别，下面将讲解 onkeypress 与 onkeydown 事件的区别。</li><li>onkeypress 事件在用户按下并放开任何字母数字键时发生。但是系统按钮（例如：箭头键、功能键）无法得到识别。</li><li>onkeydown 事件在用户按下任何键盘键（包括系统按钮）时发生。</li><li>具体区别：</li><li>\1. 一个放开一个没有放开，onkeydown 先于 onkeypress 发生。</li><li>2.onkeypress 无法识别系统按钮。</li><li>2.onkeydown 捕获的 keyCode 不区分字母大小，而 onkeypress 区分。</li></ul></li><li><p>键盘抬起事件（onkeyup()）</p></li><li><ul><li><p>案例</p><pre><code>&lt;body&gt;&lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;&lt;script&gt;    document.getElementById(&quot;txt&quot;).onkeydown = function () &#123;        console.log(&quot;键盘按下了&quot;);    &#125;;    document.getElementById(&quot;txt&quot;).onkeyup = function () &#123;        console.log(&quot;键盘抬起了&quot;);    &#125;;&lt;/script&gt;&lt;/body&gt;</code></pre></li></ul></li><li><p>keyCode获取按下的键</p></li></ul><table><thead><tr><th><strong>数字值</strong></th><th><strong>实际键值</strong></th></tr></thead><tbody><tr><td>48到57</td><td>0到9</td></tr><tr><td>65到90</td><td>a到z（A到Z）</td></tr><tr><td>112到135</td><td>F1到F12</td></tr><tr><td>8</td><td>BackSpace（退格）</td></tr><tr><td>9</td><td>Tab</td></tr><tr><td>13</td><td>Enter（回车）</td></tr><tr><td>20</td><td>Caps_Lock（大写锁定）</td></tr><tr><td>32</td><td>Space（空格键）</td></tr><tr><td>37</td><td>Left（左箭头）</td></tr><tr><td>38</td><td>Up（上箭头）</td></tr><tr><td>39</td><td>Right（右箭头）</td></tr><tr><td>40</td><td>Down（下箭头）</td></tr></tbody></table><ul><li><p>案例</p><pre><code>&lt;script&gt;    //页面的任何的位置.按下键盘,获取按键的值    document.onkeydown = function (e) &#123;        switch (e.keyCode) &#123;            case 81:                console.log(&quot;您按下的是Q&quot;);                break;            case 87:                console.log(&quot;您按下的是W&quot;);                break;            case 69:                console.log(&quot;您按下的是E&quot;);                break;            case 82:                console.log(&quot;您按下的是R&quot;);                break;        &#125;    &#125;;&lt;/script&gt;</code></pre></li><li><p>onmousedown / onmouseup 鼠标按下/抬起事件</p></li><li><ul><li>当鼠标左键或右键按下或者抬起的时候触发</li><li>按下或抬起滚动轮也会触发，滑动滚动轮不能触发</li><li>如果鼠标比较高级，有其他按键的情况下，按下或抬起也会触发</li><li>案例</li></ul></li></ul><pre><code>&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        div &#123;            width: 50px;            height: 50px;            background-color: pink;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;dv&quot;&gt;&lt;/div&gt;&lt;script&gt;    document.getElementById(&quot;dv&quot;).onmousedown = function () &#123;        console.log(&quot;鼠标按下了&quot;);    &#125;;    document.getElementById(&quot;dv&quot;).onmouseup = function () &#123;        console.log(&quot;鼠标抬起了&quot;);    &#125;;&lt;/script&gt;&lt;/body&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(九)动画</title>
      <link href="/2022/07/08/%E4%B9%9D-%E5%8A%A8%E7%94%BB/"/>
      <url>/2022/07/08/%E4%B9%9D-%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>(九)动画</p><span id="more"></span><p>CSS动画是W3C于2009年发布3D变形动画（标准草案），在年底发布了2D变形动画</p><p>浏览器支持使用代码形成网页动画，并且有些浏览器在添加时为了更好的兼容性，需要添加浏览器引擎的私有属性</p><ol><li>谷歌：-webkit-</li><li>火狐：-moz-</li><li>IE9：-ms-</li><li>其它一些浏览器不需要添加这些私有属性</li></ol><h2 id="9-1-CSS-2D动画"><a href="#9-1-CSS-2D动画" class="headerlink" title="9.1 CSS 2D动画"></a>9.1 CSS 2D动画</h2><ul><li>2D动画可以用于元素的旋转，缩放，位移等</li><li>基本语法</li></ul><table><thead><tr><th>transform:none|transform-function</th></tr></thead><tbody><tr><td>none为默认值</td></tr><tr><td>transform-function：变形函数（变形函数可以是一个，也可以是多个函数列表）  函数是以()结尾</td></tr></tbody></table><ul><li><p>常见的变形函数</p></li><li><ul><li>translate():移动元素</li><li>scale():元素缩放，可以是任意尺寸发生变形</li><li>rotate():旋转元素，取一个度数值，度数的后缀为deg，当度数为正时为顺时针旋转，为负时为逆时针旋转</li><li>skew()：元素斜切，取度数值让元素发生形状变化</li></ul></li><li><p>旋转rotate()</p></li><li><ul><li>让元素逆时针或顺时针旋转</li></ul></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;            margin: 200px auto;        &#125;        /*伪类样式：当鼠标悬停在元素上时触发里面的样式属性*/        .box:hover&#123;            transform: rotate(90deg);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>位置移动translate(左值，上值)</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;        &#125;        .two&#123;            transform: translate(100px,100px);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;    &lt;div class=&quot;box two&quot;&gt;这是2&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>放大缩小（scale(宽度放大倍数,高度放大倍数)    当放大时两个值大于1，如果值位于0,1之间时为缩小）</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;            margin: 200px auto;        &#125;        .box:hover&#123;            transform: scale(0.5,2);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>斜切（skew(Y轴角度，X轴角度)），当度数为正值时从左边斜切，为负值时从右边斜切</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;            margin: 200px auto;        &#125;        .box:hover&#123;            transform: skew(45deg,10deg);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="9-1-1-简易照片墙"><a href="#9-1-1-简易照片墙" class="headerlink" title="9.1.1 简易照片墙"></a>9.1.1 简易照片墙</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        *&#123;            margin: 0 auto;        &#125;        .PBox&#123;            width: 100%;            height: 400px;            background-color: #efefef;            display: flex;            flex-wrap: nowrap;            justify-content: space-around;        &#125;        .PBox dl&#123;            width: 10%;            height: 70%;            background-color: white;            /*为了让照片看起来有那么点感觉，这里添加一个阴影*/            box-shadow: 0px 10px 30px #8c8c8c;            padding: 10px 20px;            margin-top: 40px;        &#125;        .PBox dt&#123;            width: 100%;            height: 80%;        &#125;        .PBox dt img&#123;            width: 100%;            height: 100%;        &#125;        .PBox dd&#123;            width: 100%;            text-align: center;            /*因为标签有一些默认的属性值，它在标签执行时就自动加载了，            我们可以通过来提升自定义属性优先级来覆盖它*/            margin: 8px 0px!important;        &#125;        /*定义动画样式，让照片墙看起来不要那么规整*/        .trans1&#123;            transform: skew(5deg,2deg);        &#125;        .trans2&#123;            transform: scale(0.9,0.8);        &#125;        .trans3&#123;            transform: rotate(25deg);        &#125;        .trans4&#123;            transform: rotate(20deg) scale(1.1,1.1);        &#125;        .trans5&#123;            transform: skew(5deg,2deg) scale(0.9,0.9);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--网页版的照片墙，一共两行--&gt;    &lt;div class=&quot;PBox&quot;&gt;        &lt;!--单个照片--&gt;        &lt;dl class=&quot;trans1&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans2&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans4&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans5&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans3&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;    &lt;/div&gt;    &lt;div class=&quot;PBox&quot;&gt;        &lt;!--单个照片--&gt;        &lt;dl&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans5&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans2&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans1&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans3&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;        &lt;dl class=&quot;trans4&quot;&gt;            &lt;dt&gt;                &lt;img src=&quot;img/IMG_E1640.JPG&quot; alt=&quot;&quot;&gt;            &lt;/dt&gt;            &lt;dd&gt;这是照片名称&lt;/dd&gt;        &lt;/dl&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="9-2-过渡"><a href="#9-2-过渡" class="headerlink" title="9.2 过渡"></a>9.2 过渡</h2><ul><li>过渡是元素从一种样式逐渐改变成另一种样式</li><li>语法</li></ul><p>transition:过渡属性名称 [时间] [效果]</p><table><thead><tr><th>过渡属性</th><th>描述</th></tr></thead><tbody><tr><td>transition</td><td>简写，该属性中包含了所有过渡属性</td></tr><tr><td>transition-property</td><td>规定应用过渡的CSS属性名称</td></tr><tr><td>transition-duration</td><td>过渡时间，默认为0</td></tr><tr><td>transition-delay</td><td>过渡从什么时候开始</td></tr><tr><td>…….</td><td>……..</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;            margin: 200px auto;        &#125;        .box:hover&#123;            /*transform: skew(45deg,10deg);*/            transform: scale(2,2);            transition: transform 1s;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）"><a href="#9-2-1-通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）-长按（-active）" class="headerlink" title="9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）"></a>9.2.1 通过过渡完善照片墙（当鼠标长按图片时，照片显示在网页的中间，并且照片角度回正，放大两倍）  长按（:active）</h4><pre><code class="html">//长按案例&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: hotpink;            border: 2px solid green;            margin: 200px auto;        &#125;        .box:active&#123;            /*transform: skew(45deg,10deg);*/            transform: scale(2,2);            transition: transform 1s;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是1&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="9-3-自定义动画"><a href="#9-3-自定义动画" class="headerlink" title="9.3 自定义动画"></a>9.3 自定义动画</h2><ul><li>使用Animation功能可以实现更加复杂的动画</li></ul><table><thead><tr><th>属性</th><th>说明</th><th>初始值</th></tr></thead><tbody><tr><td>animation</td><td>包含所有属性</td><td></td></tr><tr><td>animation-name</td><td>动画名称</td><td>none</td></tr><tr><td>animation-duration</td><td>动画时间</td><td>0</td></tr><tr><td>animation-timing-function</td><td>动画播放方式</td><td>ease</td></tr><tr><td>animation-iteration-count</td><td>动画播放的次数</td><td>1，infinite为重复播放</td></tr></tbody></table><ul><li><p>制作动画需要以下两步</p></li><li><ul><li>第一步：需要在样式表中添加动画过程属性</li></ul></li></ul><pre><code class="html">@-webkit-keyframes name &#123;    /*动画开始时属性样式*/    0%&#123;    /*样式属性：属性值*/    &#125;    /*动画结束时属性样式*/    100%&#123;    /*样式属性：属性值*/    &#125;  &#125;  @keyframes name &#123;    /*动画开始时属性样式*/    0%&#123;    /*样式属性：属性值*/    &#125;    /*动画结束时属性样式*/    100%&#123;    /*样式属性：属性值*/    &#125;    &#125;</code></pre><ul><li><ul><li>第二步：将制作好的动画通过animation引入给标签使用</li></ul></li></ul><pre><code class="html">//图片翻转&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        *&#123;            margin: 0 auto;            padding: 0px;        &#125;        .box&#123;            width: 500px;            height: 300px;            background-image: url(&quot;img/IMG_E1640.JPG&quot;);            background-size: 100%;            /*引用动画*/            animation:rotateImg 10s infinite;        &#125;        /*制作动画执行过程*/        @-webkit-keyframes rotateImg &#123;            0%&#123;                /*图片起始不动*/                -webkit-transform: rotateY(0deg);            &#125;            50%&#123;                -webkit-transform: rotateY(360deg);            &#125;            100%&#123;                -webkit-transform: rotateY(720deg);            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>光盘旋转效果</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        *&#123;            margin: 0 auto;            padding: 0px;        &#125;        .box&#123;            width: 500px;            height: 500px;            background-image: url(&quot;img/IMG_E1640.JPG&quot;);            background-size: 100% 100%;            border-radius: 50%;            display: flex;            /*引用大圆旋转动画*/            animation: box 30s linear infinite;        &#125;        .lb&#123;            width: 400px;            height: 400px;            background-image: url(&quot;img/IMG_1443.JPG&quot;);            background-size: 100% 100%;            border-radius: 50%;            align-self: center;            animation: lb 15s linear infinite;        &#125;        /*制作动画：大圆要顺时针旋转，稍慢*/        @-webkit-keyframes box &#123;            0%&#123;                -webkit-transform: rotate(0deg);            &#125;            100%&#123;                -webkit-transform: rotate(360deg);            &#125;        &#125;        /*制作动画：小圆要逆时针旋转，稍快*/        @-webkit-keyframes lb &#123;            0%&#123;                -webkit-transform: rotate(0deg);            &#125;            100%&#123;                -webkit-transform: rotate(-360deg) rotateY(360deg);            &#125;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>3D旋转相册</p><pre><code class="html">&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;&lt;/title&gt;&lt;style&gt;body &#123;    background:#06081B;    perspective:5000px;&#125;.show &#123;    perspective:5000px;    -webkit-transform:rotateX(-45deg);    -moz-transform:rotateX(-45deg);    transform:rotateX(-45deg);    transform-style:preserve-3d;&#125;.box &#123;    position:relative;    width:150px;    height:250px;    margin:300px auto;    transform-style:preserve-3d;    -webkit-animation:rotate1 10s linear infinite;    -moz-animation:rotate1 10s linear infinite;    animation:rotate1 10s linear infinite;    background-image: url(&quot;img/IMG_E1640.JPG&quot;);    background-size: 100%;&#125;.box img &#123;    width:150px;    height:250px;    border:1px solid #ccc;    position:absolute;    left:0;    top:0;    -webkit-box-reflect:below 20px -webkit-linear-gradient(top,rgba(250,250,250,0),rgba(250,250,250,0) 30%,rgba(250,250,250,0.5));&#125;.img1 &#123;    -webkit-transform:translateZ(300px);    -moz-transform:translateZ(300px);    transform:translateZ(300px);&#125;.img2 &#123;    -webkit-transform:rotateY(36deg) translateZ(300px);    -moz-transform:rotateY(36deg) translateZ(300px);    transform:rotateY(36deg) translateZ(300px);&#125;.img3 &#123;    -webkit-transform:rotateY(72deg) translateZ(300px);    -moz-transform:rotateY(72deg) translateZ(300px);&#125;.img4 &#123;    -webkit-transform:rotateY(108deg) translateZ(300px);    -moz-transform:rotateY(108deg) translateZ(300px);    transform:rotateY(108deg) translateZ(300px);&#125;.img5 &#123;    -webkit-transform:rotateY(144deg) translateZ(300px);    -moz-transform:rotateY(144deg) translateZ(300px);    transform:rotateY(144deg) translateZ(300px);&#125;.img6 &#123;    -webkit-transform:rotateY(180deg) translateZ(300px);    -moz-transform:rotateY(180deg) translateZ(300px);    transform:rotateY(180deg) translateZ(300px);&#125;.img7 &#123;    -webkit-transform:rotateY(216deg) translateZ(300px);    -moz-transform:rotateY(216deg) translateZ(300px);    transform:rotateY(216deg) translateZ(300px);&#125;.img8 &#123;    -webkit-transform:rotateY(252deg) translateZ(300px);    -moz-transform:rotateY(252deg) translateZ(300px);    transform:rotateY(252deg) translateZ(300px);&#125;.img9 &#123;    -webkit-transform:rotateY(288deg) translateZ(300px);    -moz-transform:rotateY(288deg) translateZ(300px);    transform:rotateY(288deg) translateZ(300px);&#125;.img10 &#123;    -webkit-transform:rotateY(324deg) translateZ(300px);    -moz-transform:rotateY(324deg) translateZ(300px);    transform:rotateY(324deg) translateZ(300px);&#125;@-moz-keyframes rotate1 &#123;    0% &#123;    -webkit-transform:rotateY(0deg);    -moz-transform:rotateY(0deg);    transform:rotateY(0deg);&#125;100% &#123;    -webkit-transform:rotateY(360deg);    -moz-transform:rotateY(360deg);    transform:rotateY(360deg);&#125;&#125;@-webkit-keyframes rotate1 &#123;    0% &#123;    -webkit-transform:rotateY(0deg);    -moz-transform:rotateY(0deg);    transform:rotateY(0deg);&#125;100% &#123;    -webkit-transform:rotateY(360deg);    -moz-transform:rotateY(360deg);    transform:rotateY(360deg);&#125;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;show&quot;&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;img src=&quot;img/IMG_E1642.JPG&quot; class=&quot;img1&quot;&gt;        &lt;img src=&quot;img/IMG_E1644.JPG&quot; class=&quot;img2&quot;&gt;        &lt;img src=&quot;img/IMG_E1640.JPG&quot; class=&quot;img3&quot;&gt;        &lt;img src=&quot;img/IMG_1444.JPG&quot; class=&quot;img4&quot;&gt;        &lt;img src=&quot;img/IMG_1440.JPG&quot; class=&quot;img5&quot;&gt;        &lt;img src=&quot;img/IMG_1439.JPG&quot; class=&quot;img6&quot;&gt;        &lt;img src=&quot;img/IMG_1430.JPG&quot; class=&quot;img7&quot;&gt;        &lt;img src=&quot;img/IMG_1427.JPG&quot; class=&quot;img8&quot;&gt;        &lt;img src=&quot;img/IMG_1429.JPG&quot; class=&quot;img9&quot;&gt;        &lt;img src=&quot;img/IMG_1443.JPG&quot; class=&quot;img10&quot;&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><p>定位(position)</p></li><li><ul><li>属性</li></ul></li><li><ul><li><ul><li>absolute：绝对定位   会让元素脱离文档流，会参照第一个父元素进行定位</li><li>fiexd：规定位置，将元素固定在某个位置不动，不管网页怎么拖动，该元素始终不动</li><li>relative：相对定位，相对于正常位置进行定位</li><li>inherit：继承，规定添加了该属性的元素继承它父元素的定位属性</li></ul></li></ul></li><li><ul><li>注：添加了定位后，对于标签位置移动时不使用margin，而使用left,right,top,bottom</li></ul></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            margin: 100px;            position: relative;        &#125;        .rows&#123;            width: 400px;            height: 200px;        &#125;        .cols&#123;            width: 50%;            height: 100%;            float: left;        &#125;        .c1&#123;            background-color: #ee3fb3;        &#125;        .c2&#123;            background-color: #50eecd;        &#125;        .lb&#123;            width: 200px;            height: 200px;            background-color: #17ff0a;            position: absolute;            top: 100px;            left: 100px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;rows&quot;&gt;            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;rows&quot;&gt;            &lt;div class=&quot;cols c2&quot;&gt;&lt;/div&gt;            &lt;div class=&quot;cols c1&quot;&gt;&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;lb&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .b1&#123;            height: 1000px;            background-color: #50eecd;        &#125;        .b2&#123;            height: 1000px;            background-color: #41ee4e;        &#125;        .b3&#123;            height: 1000px;            background-color: #edee4f;        &#125;        .b4&#123;            height: 1000px;            background-color: #ee3b13;        &#125;        .b5&#123;            height: 1000px;            background-color: #c25eee;        &#125;        .fixedDemo&#123;            position: fixed;            right: 0px;            top: 30%;            background-color: #17ff0a;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .b1&#123;            height: 1000px;            background-color: #50eecd;        &#125;        .b2&#123;            height: 1000px;            background-color: #41ee4e;        &#125;        .b3&#123;            height: 1000px;            background-color: #edee4f;        &#125;        .b4&#123;            height: 1000px;            background-color: #ee3b13;        &#125;        .b5&#123;            height: 1000px;            background-color: #c25eee;        &#125;        .fixedDemo&#123;            position: fixed;            right: 0px;            top: 30%;            background-color: #17ff0a;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;b1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b2&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b3&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b4&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;b5&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;fixedDemo&quot;&gt;若干国粹&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(十)JavaScript基础</title>
      <link href="/2022/07/08/%E5%8D%81-JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/07/08/%E5%8D%81-JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>(十)JavaScript基础</p><span id="more"></span><h2 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1 概述"></a>10.1 概述</h2><p>JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p><ul><li>是一种解释性脚本语言（代码不进行预编译）。</li><li>主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。</li><li>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。</li><li>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。</li></ul><p>Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。</p><h2 id="10-2-JavaScript能做什么"><a href="#10-2-JavaScript能做什么" class="headerlink" title="10.2 JavaScript能做什么"></a>10.2 JavaScript能做什么</h2><ul><li>使网页具有交互性，例如响应用户点击，给用户提供更好的体验</li><li>可以处理表单，检验用户的输入，并提供及时反馈节省用户时间。例如，表单中要你输入电子邮箱而你却输入一个手机号，那么应该给你一个提醒。</li><li>还可以根据用户的操作，动态的创建页面。例如，发邮件时，添加附件操作。</li><li>设置cookie，cookie是存储在浏览器上的一些临时信息，例如你浏览过的网站地址，使用过的用户名</li><li>JavaScript 是有规律地重复的HTML元素简化，减少下载时间。</li><li>浏览器与服务器进行数据通讯，比如现在最流行的Ajax异步传输；</li></ul><h2 id="10-3-JavaScript构成"><a href="#10-3-JavaScript构成" class="headerlink" title="10.3 JavaScript构成"></a>10.3 JavaScript构成</h2><ul><li><p>JavaScript由以下三部分组成：</p></li><li><ul><li>ECMAScript，它用来描述语法和基本对象</li><li>文档对象模型Doucment Object       Model（DOM），用来处理网页内容</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651195487-efff79bc-a3b0-45b8-9a7a-faf1c6d7abda.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>浏览器对象模型Borwser Object Model（BOM），用来处理浏览器交互</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630651202360-0b177732-6264-4def-9a1b-fdda98bbc257.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h2 id="10-4-JavaScript的开发环境与运行环境"><a href="#10-4-JavaScript的开发环境与运行环境" class="headerlink" title="10.4 JavaScript的开发环境与运行环境"></a>10.4 JavaScript的开发环境与运行环境</h2><ul><li>JavaScript为轻型脚本语言，可在任意文本编辑器中编辑</li><li>由于JavaScript是内嵌在HTML中执行，所以其运行环境即浏览器</li></ul><h2 id="10-5-JavaScript的使用"><a href="#10-5-JavaScript的使用" class="headerlink" title="10.5 JavaScript的使用"></a>10.5 JavaScript的使用</h2><ul><li><p>JavaScript需在HTML中内嵌运行，其内嵌方式有两种：</p></li><li><ul><li>在网页中创建&lt;script&gt;&lt;/script&gt;,在标签之间写JavaScript代码</li></ul></li></ul><pre><code class="javascript">&lt;script&gt;      alert(&quot;hello world&quot;)&lt;script&gt;</code></pre><ul><li><ul><li>在外部创建“.js”文件，通过&lt;script src=”文件路径”&gt;引入到HTML文件中执行</li></ul></li></ul><pre><code class="html">&lt;head&gt;    &lt;script src=&quot;xxx/xxx.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code></pre><h2 id="10-6-JavaScript基础"><a href="#10-6-JavaScript基础" class="headerlink" title="10.6 JavaScript基础"></a>10.6 JavaScript基础</h2><ul><li><p>值</p></li><li><ul><li>数字类型的值（数字）</li><li>算术值（加减乘除等运算，需要两个或两个以上的数字）</li><li>特殊数字</li></ul></li><li><ul><li><ul><li>在JavaScript中有三个特殊数值，他们被视为数字，但其行为不像普通数字那样</li><li>Infinity和-Infinity表示正无穷大和负无穷大</li><li>NaN代表不是数字，就是不当的算数运算得到不当的值（比如：0/0或者Infinity-Infinity都会得到这样的值）</li></ul></li></ul></li><li><ul><li>字符串（用于表示文本，使用引号引起来即可）</li></ul></li><li><ul><li><ul><li>在字符串中还需要注意</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>在引号中添加特殊字符时比较难加，但是只需要添加反引号”`“就可解决这个问题</li></ul></li></ul></li></ul></li></ul><p>console.log(<code>hello my   &quot;son&quot;</code>);</p><ul><li><p>转义符（\）</p></li><li><ul><li>出现在引用文本中，表示后面有特殊字符</li><li>换行符（\n）</li><li>制表符（\t）</li><li>如果希望字符串中的斜杠只是斜杠，可以使用两个斜杠</li></ul></li></ul><p>console.log(“l   input &quot;\n&quot;“);</p><ul><li><p>运算符</p></li><li><ul><li>一元运算符</li></ul></li><li><ul><li><ul><li>在JavaScript中并非所有的运算符都是由符号构成的，还有由单词构成的符号，如：typeof运算符用来生成一个字符串，表示你输入数据的类型</li></ul></li></ul></li></ul><p>console.log(typeof   2.2);console.log(typeof   “hello”);</p><ul><li><p>布尔值</p></li><li><ul><li>比较运算符（&gt;,&lt;,&lt;=,&lt;=……）</li></ul></li><li><ul><li><ul><li>比较运算符属于二元运算符</li></ul></li></ul></li></ul><p>console.log(1&lt;2)</p><ul><li>字符串也是可以比较的</li></ul><table><thead><tr><th>console.log(a&gt;b)</th></tr></thead><tbody><tr><td>字符串在比较时大致时按照字母的顺序比较，而小写字母的大于大写字母，在字符串比较是JavaScript从左道右遍历字符按照字母的unicode编码进行比较</td></tr><tr><td>注意：在JavaScript中只有一个值不等于它自己，他就是NaN（不是数字）console.log(NaN==NaN)返回false</td></tr></tbody></table><ul><li><p>逻辑运算符（与，或，非）</p></li><li><ul><li>&amp;&amp;:表示逻辑与，表示结果为真才为真</li></ul></li></ul><table><thead><tr><th>console.log(true&amp;&amp;false)</th><th>false</th></tr></thead><tbody><tr><td>console.log(true&amp;&amp;true)</td><td>true</td></tr><tr><td></td><td></td></tr></tbody></table><ul><li><ul><li>||：表示逻辑或，表示一个为真，则为真</li></ul></li></ul><table><thead><tr><th>console.log(true||false)</th><th>true</th></tr></thead><tbody><tr><td>console.log(false||false)</td><td>false</td></tr></tbody></table><ul><li><ul><li>!：表示逻辑非，表示取反</li><li>在上边两种运算符混合使用时需要注意他们的优先级，一般情况下是,||具有最低优先级，然后时&amp;&amp;，然后是比较运算符，再然后时其他运算符</li><li>三元运算符，由问号和冒号写成</li></ul></li></ul><table><thead><tr><th>console.log(true?1:2)</th></tr></thead><tbody><tr><td>console.log(false?1:2)</td></tr></tbody></table><ul><li><p>空值</p></li><li><ul><li>再JavaScript中使用null和undefined表示空值</li></ul></li><li><p>自动类型转换</p></li><li><ul><li>JavaScript的包容性时相当高的，几乎可以接受你给他的任何程序</li><li>当运算符应用不同类型的值时，JavaScript会使用一组规则自动将值转换成所需要的类型供你使用（强制类型转换）</li></ul></li></ul><table><thead><tr><th>console.log(8*null)–&gt;0</th></tr></thead><tbody><tr><td>console.log(“3”-1)–&gt;2</td></tr><tr><td>console.log(“3”+1)–&gt;31</td></tr><tr><td>console.log(“six”*1)–&gt;NaN</td></tr><tr><td>console.log(false==0)–&gt;true</td></tr><tr><td>console.log(null==undefined)–&gt;true</td></tr><tr><td>console.log(null==0)–&gt;false</td></tr></tbody></table><ul><li><p>表达式</p></li><li><ul><li>生成值得代码片段称之为表达式</li></ul></li></ul><p>console.log(1+1);</p><ul><li><p>绑定（变量）</p></li><li><ul><li>·JavaScript为了让程序中得数据保持提供了一个称为绑定（binding）或变量（variable）得东西</li></ul></li><li><ul><li><ul><li>let属于JavaScript关键字表示将定义一个绑定，它得后面是绑定名称，如果我们想给它一个值，则由”=”运算符和表达式来完成</li></ul></li></ul></li></ul><table><thead><tr><th>let a =   1*2</th></tr></thead><tbody><tr><td>let num =   10; console.log(num*num);</td></tr></tbody></table><ul><li><ul><li><ul><li>当绑定值指向一个值时并部意味着它永远时该值，”=”运算符随时可以更新绑定赋予绑定新值</li></ul></li></ul></li></ul><p>let   name=”张三”;conlose.log(name);name   = “李四”;console.log(name);</p><ul><li><ul><li><ul><li>在JavaScript中不单单可以使用let去做绑定,var和const两个也可以用于绑定</li></ul></li></ul></li></ul><table><thead><tr><th>var   name=”hello”;console.log(name);</th></tr></thead><tbody><tr><td>const demo   = “world”;console.log(demo);</td></tr><tr><td>console.log(name+demo);</td></tr><tr><td>注：1.var全称(variable)表示变量，多用于以前得JavaScript中声明绑定2.const全称（constant），表示定义一个常量绑定，只要它存在，它就一直指向相同得值</td></tr></tbody></table><ul><li><p>JavaScript语句</p></li><li><ul><li>JavaScript语句是发给浏览器的命令</li><li>这些命令的作用是告诉浏览器要做的事情</li><li>比如</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652275534-6e34e0ea-ce7f-4cb2-b9f5-a303441fbb5b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652282839-d8f3b6f0-bb99-4311-af61-9ec9d1d592a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr><tr><td>解析：点击hello world后，触发JavaScript点击事件（onclick点击事件，点击后innerHTML替换标签里的内容，即把”hello world“替换成“世界 你好”）</td></tr></tbody></table><ul><li><p>分号</p></li><li><ul><li>分号用于分隔JavaScript语句</li><li>通常我们在每条可执行的语句结尾添加分号，代表作一句JavaScript语句的结束</li><li>使用分号的另一个好处就是。。。。能在一行多写点代码嘛</li></ul></li><li><p>JavaScript代码</p></li><li><ul><li>JavaScript代码是JavaScript语句的序列</li><li>浏览器按照编写顺序依次执行每条语句</li></ul></li><li><p>JavaScript代码块</p></li><li><ul><li>JavaScript可以分批地组合起来</li><li>代码块以左花括号开始，以右花括号结束</li><li>代码块的作用是一并执行语句序列</li></ul></li><li><p>示例</p></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652313702-584a551d-bd15-4e8c-873f-304b09194343.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630652326450-8100dccd-e3b6-4e7d-afbc-1246a23c2fc5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><ul><li><p>JavaScript语句标识符</p></li><li><ul><li>JavaScript语句通常以一个语句标识符为开始，并执行该语句。</li><li>语句标识符是保留关键字不能作为变量名使用</li><li>JavaScript语句标识符（关键字）</li></ul></li></ul><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>用于跳出循环</td></tr><tr><td>catch</td><td>语句块，在try语句块执行出错时执行catch语句块</td></tr><tr><td>continue</td><td>跳过循环的一个迭代</td></tr><tr><td>do…while</td><td>执行一个语句块，在条件语句为true时继续执行该语句块</td></tr><tr><td>for</td><td>在条件语句为true时，可以将代码块执行指定的次数</td></tr><tr><td>for…in</td><td>用于遍历数组或对象的属性（对数组或者对象的属性进行循环操作）</td></tr><tr><td>function</td><td>定义一个函数</td></tr><tr><td>if…else</td><td>用于基于不同的条件来执行不同的动作</td></tr><tr><td>return</td><td>退出函数</td></tr><tr><td>switch</td><td>用于基于不同条件来执行不同的动作</td></tr><tr><td>throw</td><td>抛出错误</td></tr><tr><td>try</td><td>实现错误处理，与catch一同使用</td></tr><tr><td>var</td><td>声明一个变量</td></tr><tr><td>while</td><td>当条件语句为true时，执行语句块</td></tr></tbody></table><ul><li>代码折行</li></ul><table><thead><tr><th>document.write(“hello   \ world”)；</th><th>但是不能这么折行document.write(“hello world”)；</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="10-7-JavaScript数据类型"><a href="#10-7-JavaScript数据类型" class="headerlink" title="10.7 JavaScript数据类型"></a>10.7 JavaScript数据类型</h2><ul><li>javascript属于弱语言，它的变量没有明确的数据类型，它的数据类型是由它存储的值自己推断出来的</li><li>常见数据类型</li></ul><table><thead><tr><th><strong>数据类型</strong></th><th><strong>具体描述</strong></th></tr></thead><tbody><tr><td>number</td><td>能存储整数和小数类型</td></tr><tr><td>string</td><td>用单引号或双引号来声明的字符串</td></tr><tr><td>boolean</td><td>只能是两个值选择：true、false</td></tr><tr><td>undefined</td><td>变量被声明后，但未被赋值</td></tr><tr><td>object</td><td>javascript中的对象、数组和null</td></tr></tbody></table><ul><li>在JavaScript中可以使用typeof()函数来检查变量的返回值类型</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655653508-92e34507-ef26-46c0-92e5-fd7054983ad7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>JavaScript拥有动态类型，这意味着相同的变量可用作不同的类型</li></ul><p>var x；//x为undefinedvar   x = 5；//x为数字var   x = “hello”;//x为字符串</p><ul><li><p>JavaScript字符串</p></li><li><ul><li>字符串是存储字符的变量</li><li>字符串可以是引号中的任意文本。可以使用单引号或者双引号</li></ul></li></ul><p>var name =   “tom”;var name =   ‘tom’;</p><ul><li>也可以在字符串中使用引号，只要不匹配包围字符串的引号即可</li></ul><p>var answer   = “let’go”;var answer   = “my name is ‘tom’ “;</p><ul><li><p>JavaScript数字</p></li><li><ul><li>JavaScript只有一种数字类型。数字可以带小数点。</li></ul></li></ul><p>var a = 3;var b =   3.14;</p><ul><li>极大或极小的数字可以通过科学计数来书写</li></ul><table><thead><tr><th>var a =   123e5;//12300000</th></tr></thead><tbody><tr><td>var b =   123e-5;//0.00123</td></tr></tbody></table><ul><li><p>JavaScript布尔</p></li><li><ul><li>布尔（逻辑）只能有两个值：true或false</li></ul></li></ul><p>var a =   false;var b =   true;</p><ul><li><p>布尔常用在条件测试中。这个我们将在之后详解</p></li><li><p>JavaScript数组</p></li><li><ul><li>详见10.8节</li></ul></li><li><p>JavaScript对象</p></li><li><ul><li>详见10.9节</li><li>对象由花括号分隔。在扩号内部，对象的属性以名称和值对的形式（键值对 name：value）来定义，属性由逗号分隔</li><li>对象有两种寻址方式：</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655910721-0a48b0a7-993c-45ca-a851-9d8a9f0216b6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655916757-28032444-e669-4911-8a08-0adc9bd721a0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ul><li><p>Undefined和Null</p></li><li><ul><li>Undefined表示变量不含值</li><li>Null可以通过将变量的值设置为Null来清空变量</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655925751-c01fd5d4-f3f1-4a93-b80f-4aff98f02075.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630655944042-42c54dea-cfb9-4ae5-b05b-700a4977857f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ul><li><p>声明变量类型</p></li><li><ul><li>当声明新变量时，可以使用关键词“new”来声明其类型</li></ul></li></ul><p>var   name = new String; var age   = new Number;var   money = new boolean;var   cars = new Arrays;var   person = new Object;</p><h2 id="10-8-数组"><a href="#10-8-数组" class="headerlink" title="10.8 数组"></a>10.8 数组</h2><ul><li><p>什么是数组</p></li><li><ul><li>数组对象是使用单独的变量名来存储一系列相同类型的值</li><li>数字可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值</li><li>数组中的每个元素都有自己的ID，以便它可以很容易地被访问到</li></ul></li><li><p>创建数组，有几种不同的方式</p></li><li><ul><li>常规方式</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656318089-149f266a-0657-417b-8911-de077af3a0f9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>简洁方式</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656324807-3401185c-a1b8-4ed5-beb7-cf10312d944f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>字面方式</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656333229-64159517-3a00-411f-9c39-8fd82965fabd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><p>访问数组</p></li><li><ul><li>通过上边的几个例子，大家应该能看出来数组是怎么访问的</li><li>语法：数组名[下标] </li></ul></li></ul><p>arr[1]</p><ul><li><ul><li>在数组中[0]代表数组的第一个元素，[1]则代表的是第二个元素</li></ul></li><li><p>来个数组式循环弹窗看看</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656416554-a1696c63-5193-447f-8671-1517574a0e6b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_38,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>弹窗完事了，再顺道在页面中把数组里的值打印出来看看<img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656471840-ecbb7e13-667b-4345-97a4-60a849ed451e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_37,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><p>在一个数组中可以有不同的对象</p></li><li><ul><li>所有的JavaScript变量都是对象，数组元素是对象，函数也是对象</li><li>因此，我们可以在数组中有不同的变量类型</li><li>我们可以在一个数组中包含对象元素，函数，数组</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656507497-a9128903-1f51-48a0-af1b-f9071ff0f389.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><p>数组方法和属性</p></li><li><ul><li>使用数组对象预定义属性和方法</li></ul></li></ul><table><thead><tr><th>var    a = 数组名.length    //length元素的数量</th></tr></thead><tbody><tr><td>var    b = 数组名.indexOf(“需要索引的字段”)  //括号里面为索引值</td></tr></tbody></table><ul><li><p>更多的实例</p></li><li><ul><li>合并两个数组-concat()</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656639810-73054345-0af6-4c4c-9ba2-fc7620a200bc.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656647809-524de2d0-01a1-475f-8190-1ae2329987a5.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ul><li><ul><li>合并三个数组-concat()</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656677924-8ac387d8-aeda-4de2-bb7f-a6e719d44605.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656681979-9220fb0b-ae48-4483-b788-aa30761ed63e.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ul><li><p>用数组的元素组合字符串-join()</p></li><li><ul><li>join()方法用于把数组中的所有元素放入一个字符串</li><li>元素是同过指定的分隔符分隔的</li></ul></li></ul><table><thead><tr><th>arrayObject.join(separator)</th></tr></thead><tbody><tr><td>separator：指定要使用的分隔符，如果省略改参数，则使用逗号作为分隔符</td></tr></tbody></table><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656712682-e75f5712-761e-4ad0-9d2e-e3d46917c3ac.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td>点击前<img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656792868-b57e6395-7e1b-4fe0-bfbf-3097f9045020.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img">点击后<img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656804077-1e9c4969-4c6a-4c0c-95b2-aece511e9d18.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656829884-022208bc-cf0a-4e17-bc1d-9e3fe8f751f4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656840313-375d5f2a-6526-4cdd-b076-4817ed5fabc0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><ul><li>删除数组的最后一个元素-pop()</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656953405-b87be9c8-c90c-445e-8960-44bf3532e01d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>数组的末尾添加新的元素-push()</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656962674-6cef5d2d-3acd-464b-b246-c412e5b99bc7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>将一个数组中的元素的顺序反转排序-reverse()</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656973478-9c465b63-bed9-4d93-845c-492bcf418b71.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_22,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>删除数组的第一个元素-shift()</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630656988336-96687b65-74b8-49a1-8576-75594e429520.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><p>从一个数组中选择元素-slice()</p></li><li><ul><li>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分</li><li>语法</li></ul></li></ul><p>stringObject.slice(start,end)</p><ul><li><ul><li>返回值</li></ul></li><li><ul><li><ul><li>一个新的字符串，包括字符串stratObject从strat开始（包括strat）到end结束（不包括end）为止的所有字符串</li></ul></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657004800-d8713e65-4d1b-4835-8958-baf47b76d95a.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>数组排序（按字母顺序升序）-sort()</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657014582-bdb1c470-3355-4e67-ad14-52c659845403.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>数字排序（按数字顺序升序）-sort()</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657037116-d77644e4-9970-43ba-8247-14f9811d9daf.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>数字排序（按数字顺序降序）-sort()</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657065901-7faa18d1-af03-443f-b5d2-d4c12611b404.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>在数组的第二位置添加一个元素 -splice()</li></ul></li><li><ul><li><ul><li>splice()方法用于插入，删除，或者替换数组的元素</li><li>语法</li></ul></li></ul></li></ul><p>arrayObject.splice(index,howmant,element1….,element1)</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。规定从何处添加/删除元素。该参数是开始插入和(或)删除的数组元素的下标，必需是数字哦</td></tr><tr><td>howmant</td><td>必需。规定应该删除多少元素。必须是数字，但可以是（0）。如果未规定此参数，则删除从index开始到原数组结尾的所有元素</td></tr><tr><td>element1</td><td>可选。规定要添加到数组的新元素。从index所指的下标处开始插入</td></tr><tr><td>elementN</td><td>可选。可向数组添加若干元素。</td></tr></tbody></table><ul><li><ul><li>返回值</li></ul></li><li><ul><li><ul><li>如果从arrayObject中删除了元素，则返回的是含有被删除的元素的数组</li></ul></li></ul></li><li><p>注意：splice()方法和slice()方法的作用是不同的，splice()方法会直接对数组,行修改。</p></li><li><p>下边的这个例子就是替换了下标“1”至“3”里面的内容，包含1和3下标的内容，也就是说我把数组里的“33，22，66”替换成了“88,44”。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657083608-3d4f358b-4c67-4628-b6f0-13a495c3ecd9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>转换数组到字符串 -toString()</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657093306-a84ce473-7c65-478f-b512-a6d76c5929ff.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li>在数组的开头添加新元素 -unshift()</li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657101064-7db40d88-68aa-4bed-98ba-96f27ed56b9b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657111628-83befa05-ad97-4553-952f-75f9d40b5144.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h2 id="10-9-对象"><a href="#10-9-对象" class="headerlink" title="10.9 对象"></a>10.9 对象</h2><ul><li><p>JavaScript对象</p></li><li><ul><li>在JavaScript中，对象是拥有属性和方法的数据。</li></ul></li><li><ul><li><ul><li>属性是与对象相关的值</li><li>方法是能够在对象上执行的动作</li></ul></li></ul></li><li><ul><li>对象也是一个变量，但对象可以包含多个值（多个变量）</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657330235-d51b4bdc-70d3-4b9b-977b-a66c32d33174.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><ul><li>上边这个例子中，三个值（**”Lamborghini”,999999,”black”**）赋予变量car</li><li>三个变量（”neme”,price,color）赋予变量car</li><li>JavaScript对象是变量的容器</li><li>定义JavaScript对象是可以跨越多行，空格跟换行不是必须的</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657337152-f7388e63-dcdc-4916-929a-f6f523d3b3a7.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_41,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657359063-4ae2da29-2812-4f6d-9e8f-0f85361ab3d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><ul><li><p>对象属性</p></li><li><ul><li>JavaScript对象是变量的容器</li><li>JavaScript对象是键值对的容器</li><li>键值对的基本写法为name:value（上边的例子就是喽）</li><li>键值对在JavaScript对象中统称为对象属性。</li><li>访问对象属性</li></ul></li><li><ul><li><ul><li>可以用对象名点属性（如：person.one）</li><li>也可以用对象名[“属性”]（如：person[“one”]）</li></ul></li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657371647-620ad6cf-4996-4ec9-b676-c8aadde3a394.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630657376463-7a710ad9-a526-457b-a68d-f3972c9f4bc4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><ul><li><p>对象方法</p></li><li><ul><li>对象的方法定义了一个函数，并作为对象的属性存储</li><li>对象方法通过添加()调用（当成函数调用）</li><li>下边的这个例子访问了person对象的all()方法（如果直接访问person对象的all属性，它将作为定义一个函数的字符串返回，也就是说把后边的代码直接返回，并且打印出来）</li></ul></li><li><ul><li><ul><li>访问方法（例：person.all()）</li><li>访问属性（例：person.all）</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(八)布局</title>
      <link href="/2022/07/08/%E5%85%AB-%E5%B8%83%E5%B1%80/"/>
      <url>/2022/07/08/%E5%85%AB-%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p> (八)布局<br> <span id="more"></span></p><h2 id="8-1-布局"><a href="#8-1-布局" class="headerlink" title="8.1 布局"></a>8.1 布局</h2><p>布局是为了对整个网页进行排版，把网站内容安排在多个列中，用以丰富网页背景，色彩，内容等网页外观，就跟房子装修一样，我们需要把我们的房子装修漂漂亮亮的而且功能实用，总不能把床放在卫生间，把马桶放在燃气灶旁边吧</p><p>我么在制作前期需要对UI设计师提供的设计图片进行布局分析，明确那个模块在什么位置，我们需要通过布局将模块创建出来，放在它该有的位置上，然后对模块进行内容填充</p><h2 id="8-2-入门布局–圣杯布局"><a href="#8-2-入门布局–圣杯布局" class="headerlink" title="8.2 入门布局–圣杯布局"></a>8.2 入门布局–圣杯布局</h2><ul><li>入门图</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630552648013-f7370ed0-1b2e-4490-8032-f72bab65f024.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_48,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例代码</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        *&#123;            margin: 0 auto;        &#125;        .top&#123;            width: 100%;            height: 80px;            margin-bottom: 10px;        &#125;        .middle&#123;            width: 100%;            height: 500px;            margin-bottom: 10px;        &#125;        .middle div&#123;            float: left;        &#125;        .middle div:nth-child(1),.middle div:nth-last-child(1)&#123;            width: 30%;            height: 100%;            background-color: #339fff;        &#125;        .middle div:nth-child(2)&#123;            width: 40%;            height: 100%;            background-color: #2279ee;        &#125;        .bottom&#123;            width: 100%;            height: 80px;        &#125;        .color1&#123;            background-color: #339fff;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--顶部--&gt;    &lt;div class=&quot;top color1&quot;&gt;&lt;/div&gt;    &lt;!--中部--&gt;    &lt;div class=&quot;middle&quot;&gt;        &lt;!--左--&gt;        &lt;div&gt;&lt;/div&gt;        &lt;!--中--&gt;        &lt;div&gt;&lt;/div&gt;        &lt;!--右--&gt;        &lt;div&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;!--底部--&gt;    &lt;div class=&quot;bottom color1&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="8-3-弹性布局"><a href="#8-3-弹性布局" class="headerlink" title="8.3 弹性布局"></a>8.3 弹性布局</h2><h4 id="8-3-1-传统布局与弹性布局"><a href="#8-3-1-传统布局与弹性布局" class="headerlink" title="8.3.1 传统布局与弹性布局"></a>8.3.1 传统布局与弹性布局</h4><ol><li>传统布局方法遵循文档流的模式，依赖浮动，相较于一些特殊布局，不容易实现（如：垂直居中效果）</li><li>弹性布局诞生于2009年，弹性布局也称之为flex布局</li><li>弹性布局可以完整的响应式的实现各种页面布局</li></ol><h4 id="8-3-2-在使用弹性布局时需要知道的两个概念"><a href="#8-3-2-在使用弹性布局时需要知道的两个概念" class="headerlink" title="8.3.2 在使用弹性布局时需要知道的两个概念"></a>8.3.2 在使用弹性布局时需要知道的两个概念</h4><ol><li>容器：需要添加弹性布局的父元素</li><li>项目：弹性布局容器中的每一个子元素称之为项目</li></ol><h4 id="8-3-3-在使用弹性布局时需要了解的两个基本方向"><a href="#8-3-3-在使用弹性布局时需要了解的两个基本方向" class="headerlink" title="8.3.3 在使用弹性布局时需要了解的两个基本方向"></a>8.3.3 在使用弹性布局时需要了解的两个基本方向</h4><ol><li>主轴：在弹性布局中，需要通过样式属性去规定水平/垂直方向为主轴</li><li>交叉轴：与主轴垂直的另一个方向称之为交叉轴</li></ol><h4 id="8-3-4-弹性布局的使用步骤"><a href="#8-3-4-弹性布局的使用步骤" class="headerlink" title="8.3.4 弹性布局的使用步骤"></a>8.3.4 弹性布局的使用步骤</h4><ol><li>给父元素添加display:flex/inline-flex来规定该容器为弹性布局显示，而不遵循常规的文档流模式</li><li>添加弹性布局的相关属性样式</li><li>注：当元素采用了弹性布局后，子元素的浮动会失效</li><li>入门</li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            background-color: aqua;        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>配合display:flex使用的12个属性（6个容器属性，6个项目属性）</p><h4 id="6个容器属性"><a href="#6个容器属性" class="headerlink" title="6个容器属性"></a>6个容器属性</h4><ol><li><ol><li>flex-direction  改属性决定主轴的方向（表示在容器中项目的排列方向）</li></ol></li></ol><table><thead><tr><th>属性值</th><th>方向</th></tr></thead><tbody><tr><td>row   默认值</td><td>主轴为水平方向，从父容器的左部开始渲染显示</td></tr><tr><td>row-reverse</td><td>主轴为水平方向，从父容器的右部开始渲染显示</td></tr><tr><td>column</td><td>主轴为垂直方向，从父容器的左上部开始渲染显示</td></tr><tr><td>column-reverse</td><td>主轴为垂直方向，从父容器的左下部开始渲染显示</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            background-color: aqua;        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>b. flex-wrap   项目的排列方式（默认情况下，所有项目都排列在一条轴线上）</p><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行，当容器的宽度不够时，容器中的每个项目将会被挤压</td></tr><tr><td>wrap</td><td>换行，按项目的实际宽度执行排列，当容器宽度不够时自动换行，并且第一行在容器的最上方</td></tr><tr><td>wrap-reverse</td><td>换行，第一行在容器的最下方</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>c.  flex-flow:flex-direction  flex-wrap</p><p>默认值为  flex-flow:row  wrap</p><p>d.  justify-content   定义了项目在主轴方向的对齐方式</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>项目位于主轴的起点</td></tr><tr><td>flex-end</td><td>项目位于主轴的终点</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>space-between</td><td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边没有间隔</td></tr><tr><td>space-around</td><td>两端对齐，项目间的间隔相等，开头项目和结束项目与容器两边有一定的间隔</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>e.  align-items  交叉轴对齐方式</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>交叉轴起点对齐</td></tr><tr><td>flex-end</td><td>交叉轴终点对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>baseline</td><td>以项目的第一行文字为基线对齐，文字的行高，字体大小会直接影响后边的项目对齐</td></tr><tr><td>stretch</td><td>如果项目没有设置高度，则添加该属性后项目会占满整个容器</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*交叉轴对齐方式*/            align-items: center;            /*align-items: flex-end;*/            /*align-items: stretch;*/        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*交叉轴对齐方式*/            align-items: stretch;        &#125;        .box div&#123;            width: 20%;            /*没有高度*/            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 100px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*交叉轴对齐方式*/            align-items: baseline;        &#125;        .box div&#123;            width: 20%;            height: 50%;            background-color: red;        &#125;        .big&#123;            font-size: 30px;            line-height: 50px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>f.  align-content 定义多根轴线的对齐方式，如果定义一根轴线则该属性不生效（不推荐出现多根轴线）</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>flex-start</td><td>与交叉轴的起点对齐</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐</td></tr><tr><td>center</td><td>与交叉轴的中点对齐</td></tr><tr><td>space-between</td><td>与交叉轴的两端对齐，轴线之间的间隔平均分布，开头和结束项目与容器没间隔</td></tr><tr><td>space-around</td><td>与交叉轴的两端对齐，轴线之间的间隔都相等</td></tr><tr><td>stretch</td><td>轴线占满整个交叉轴</td></tr></tbody></table><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*多根轴线与交叉轴的对齐方式*/            /*align-content: center;*/            align-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .big&#123;            font-size: 30px;            line-height: 50px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;big&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;        &lt;div&gt;9&lt;/div&gt;        &lt;div&gt;10&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6个项目属性"><a href="#6个项目属性" class="headerlink" title="6个项目属性"></a>6个项目属性</h4><ol><li><ol><li>order 定义项目排列的顺序，数值越小，排列越靠前，默认值为0，当添加了大于0的值后，该项目则不遵循文档流的排列方式</li></ol></li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*多根轴线与交叉轴的对齐方式*/            /*align-content: center;*/            align-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .big&#123;            font-size: 30px;            line-height: 50px;        &#125;        .orderStyle&#123;            order: 5;        &#125;        .orderStyle1&#123;            order: 7;        &#125;        .orderStyle2&#123;            order: 6;        &#125;        .orderStyle3&#123;            order: 4;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div class=&quot;orderStyle2&quot;&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div class=&quot;orderStyle3&quot;&gt;8&lt;/div&gt;        &lt;div&gt;9&lt;/div&gt;        &lt;div&gt;10&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>b. flex-grow 用来定义项目的放大比例，默认为0，在为0的情况下，即使容器还有空间，项目也不会放大，当值大于零时容器还有空间余量的话则添加了该属性的项目会放大</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            /*flex-wrap: nowrap;*/            flex-wrap: wrap;            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*多根轴线与交叉轴的对齐方式*/            /*align-content: center;*/            align-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .big&#123;            font-size: 30px;            line-height: 50px;        &#125;        .orderStyle&#123;            order: 5;            flex-grow: 2;        &#125;        .orderStyle1&#123;            order: 7;            flex-grow: 2;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;big orderStyle&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div class=&quot;orderStyle1&quot;&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>c. flex-shrink  定义项目是否可压缩，默认值为1，若空间不够，该项目将被缩小，如果其中某一个项目的值被设置为0，则它的空间不会被压缩</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            flex-wrap: nowrap;            /*flex-wrap: wrap;*/            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*多根轴线与交叉轴的对齐方式*/            /*align-content: center;*/            align-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .fs&#123;            flex-shrink: 0;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;        &lt;div&gt;9&lt;/div&gt;        &lt;div&gt;10&lt;/div&gt;        &lt;div&gt;11&lt;/div&gt;        &lt;div&gt;12&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>d. flex-basis  定义了项目占据主轴的空间（设置项目的宽度，当项目添加了该属性后，width会失效）</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            flex-wrap: nowrap;            /*flex-wrap: wrap;*/            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            /*多根轴线与交叉轴的对齐方式*/            /*align-content: center;*/            align-content: space-between;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .fs&#123;            flex-shrink: 0;            flex-basis: 50%;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;        &lt;div&gt;9&lt;/div&gt;        &lt;div&gt;10&lt;/div&gt;        &lt;div&gt;11&lt;/div&gt;        &lt;div&gt;12&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>e. align-self  设置某个项目在交叉轴上的对齐方式，其参数和align-items一致，当某个项目添加了该属性后，则会覆盖父容器上的align-itmes属性，其默认值为auto（表示继承父容器的align-itmes值）</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100%;            height: 300px;            /*规定容器*/            display: flex;            /*主轴*/            flex-direction: row;            /*flex-direction: row-reverse;*/            /*flex-direction: column;*/            /*flex-direction: column-reverse;*/            /*排列方式*/            flex-wrap: nowrap;            /*flex-wrap: wrap;*/            /*flex-wrap: wrap-reverse;*/            background-color: aqua;            /*主轴对齐方式*/            /*justify-content: flex-start;*/            /*justify-content: flex-end;*/            /*justify-content: space-around;*/            justify-content: space-between;            align-items: center;        &#125;        .box div&#123;            width: 20%;            height: 50px;            background-color: red;        &#125;        .fs&#123;            flex-shrink: 0;            flex-basis: 50%;            align-self: flex-end;        &#125;        .as&#123;            align-self: flex-start;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;fs&quot;&gt;1&lt;/div&gt;        &lt;div&gt;2&lt;/div&gt;        &lt;div&gt;3&lt;/div&gt;        &lt;div&gt;4&lt;/div&gt;        &lt;div&gt;5&lt;/div&gt;        &lt;div&gt;6&lt;/div&gt;        &lt;div class=&quot;as&quot;&gt;7&lt;/div&gt;        &lt;div&gt;8&lt;/div&gt;        &lt;div&gt;9&lt;/div&gt;        &lt;div&gt;10&lt;/div&gt;        &lt;div&gt;11&lt;/div&gt;        &lt;div&gt;12&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>f. flex属性，该属性相当于flex-grow，flex-shrink，flex-basis的简写，默认值0,1 auto</p>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(七)盒子模型</title>
      <link href="/2022/07/08/%E4%B8%83-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/07/08/%E4%B8%83-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>(七)盒子模型</p><span id="more"></span><h2 id="1-盒子模型概述"><a href="#1-盒子模型概述" class="headerlink" title=".1 盒子模型概述"></a>.1 盒子模型概述</h2><p>盒子模型，顾名思义就是用来装东西的，它装的东西就是HTML元素的内容。</p><p>我们可以把一个HTML元素看成是一个盒子</p><h2 id="7-2盒子构成"><a href="#7-2盒子构成" class="headerlink" title="7.2盒子构成"></a>7.2盒子构成</h2><p>一个盒子由内容，内边距，边框，外边距构成</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630546545732-4ea8d916-d374-4662-bc4b-79f5b2280ce2.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_12,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><ul><li><p>内容（content）：表示元素的宽高，若元素设置了宽度和高度，则内容空间就位宽高范围，若没有宽高，则内容空间为盒子中实际内容的所占空间</p></li><li><p>内边距（padding）：表示盒子内容与边框之间的距离</p></li><li><p>边框（border）：表示盒子的边框，位于内边距和外边距指甲剪</p></li><li><p>外边距（margin）：表示盒子边框以外的距离</p></li><li><p>注：</p></li><li><ul><li>盒子的内外边距是透明的</li><li>盒子的大小不是我们通过CSS设置的width和height，而是内容宽高+内边距+边框+外边距</li></ul></li></ul><h2 id="7-3-盒子属性解析"><a href="#7-3-盒子属性解析" class="headerlink" title="7.3 盒子属性解析"></a>7.3 盒子属性解析</h2><h4 id="7-3-1-内边距（padding）"><a href="#7-3-1-内边距（padding）" class="headerlink" title="7.3.1 内边距（padding）"></a>7.3.1 内边距（padding）</h4><p>就是盒子里的内容距离盒子边框的距离</p><ul><li><p>作用：</p></li><li><ul><li>可以让内容和盒子的边框有一定的距离</li></ul></li><li><p>属性值</p></li><li><ul><li>padding:Xpx;给盒子的内容四周都加上内边距</li><li>padding:Xpx Xpx;两个值分别上下 ，左右</li><li>padding:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左</li><li>padding-left/right/top/bottom:Xpx;给内容的某一边加内边距</li></ul></li></ul><p>示例一</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .PDemo&#123;            width: 150px;            height: 100px;            background-color: red;            padding: 20px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547882713-1cb0c1f2-f858-4c1b-acb7-f31f9703100d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例二</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .PDemo&#123;            width: 150px;            height: 100px;            background-color: red;            padding: 20px 30px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630547995631-fba7ef81-ca54-467f-b417-33bf883906d6.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_10,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例三</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .PDemo&#123;            width: 150px;            height: 100px;            background-color: red;            padding: 20px 30px 40px 50px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630548056044-bb2e3d25-f797-4698-9e4a-f2ac1de07f3b.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例四</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .PDemo&#123;            width: 150px;            height: 100px;            background-color: red;            /*padding-left: 20px;*/            /*padding-right: 20px;*/            /*padding-top: 20px;*/            padding-bottom: 20px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;PDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="7-3-2-边框（border）"><a href="#7-3-2-边框（border）" class="headerlink" title="7.3.2 边框（border）"></a>7.3.2 边框（border）</h4><p>表示盒子的边界</p><ul><li><p>作用</p></li><li><ul><li>为盒子四周或某一边添加带有颜色的边框</li></ul></li><li><p>属性</p></li><li><ul><li>border:边框宽度  实线/虚线 颜色</li><li>border-left/right/top/bottom:边框宽度  实线/虚线 颜色</li></ul></li></ul><p>示例一</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .BDemo&#123;            width: 150px;            height: 100px;            background-color: red;            border: 3px solid black;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549338273-f61b86c7-aa74-4672-b852-8eeb4de811ab.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例二</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .BDemo&#123;            width: 150px;            height: 100px;            background-color: red;            /*border: 3px solid black;*/            border-top:3px solid black; ;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;BDemo&quot;&gt;这是内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630549747573-1400452d-3701-4e50-a180-21e85f9a8d07.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_9,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="7-3-3-外边距（margin）"><a href="#7-3-3-外边距（margin）" class="headerlink" title="7.3.3 外边距（margin）"></a>7.3.3 外边距（margin）</h4><p>表示盒子距离它周围的距离</p><ul><li><p>作用：可以用来调整元素与元素之间的间距，也可以用来移动元素（注：微调）</p></li><li><p>属性：</p></li><li><ul><li>margin:Xpx;给盒子的内容四周都加上外边距</li><li>margin:Xpx Xpx;两个值分别上下 ，左右</li><li>margin:Xpx Xpx Xpx Xpx;分别表示 上，右，下，左（外边距它渲染显示的时候也是从左上开始）</li><li>margin-left/right/top/bottom:Xpx;使盒子对四周的某一边有距离</li></ul></li><li><p>注：</p></li><li><ul><li>元素在渲染显示的时候左上属性优先</li></ul></li></ul><p>示例一</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100px;            height: 100px;            background-color: #339fff;            /*margin: 20px;*/            /*margin-top: 20px;*/            /*margin-right: 20px;*/            /*margin-left: 20px;*/            /*margin-bottom: 20px;*/            /*margin: 20px 40px;*/            margin: 20px 30px 40px 50px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>实例二</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 100px;            height: 100px;            background-color: #339fff;            margin: 20px 30px 40px 50px;            float: left;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(六)样式表与选择器</title>
      <link href="/2022/07/08/%E5%85%AD-%E6%A0%B7%E5%BC%8F%E8%A1%A8%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2022/07/08/%E5%85%AD-%E6%A0%B7%E5%BC%8F%E8%A1%A8%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>(六)样式表与选择器</p><span id="more"></span><h2 id="6-1-样式表"><a href="#6-1-样式表" class="headerlink" title="6.1 样式表"></a>6.1 样式表</h2><p>css 是 web 标准中的表现标准，专门用来对网页标签进行布局和设置样式的一门语言，目前使用css3，css 又名层叠样式表.</p><p>样式表表示CSS代码的位置，目前CSS样式表分以下三类：</p><h4 id="6-1-1-内联样式表"><a href="#6-1-1-内联样式表" class="headerlink" title="6.1.1 内联样式表"></a>6.1.1 内联样式表</h4><ul><li>顾名思义内联样式写在标签中（在开始标签中添加style=””属性，在双引号中添加样式属性，属性和属性之间用分号隔开）</li><li>格式</li></ul><p>&lt;开始标签 style=”样式属性:属性值;样式属性:属性值;………”&gt;标签内容&lt;/结束标签&gt;</p><p>示例</p><pre><code class="html">&lt;body&gt;    &lt;div style=&quot;color: red&quot;&gt;内联样式&lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="6-1-2-内部样式表"><a href="#6-1-2-内部样式表" class="headerlink" title="6.1.2 内部样式表"></a>6.1.2 内部样式表</h4><ul><li>写在html内部的样式（在html的头文件中嵌套&lt;style&gt;标签，在style标签中通过特有格式添加基本样式）</li><li>格式</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-1-3-外部样式表"><a href="#6-1-3-外部样式表" class="headerlink" title="6.1.3 外部样式表"></a>6.1.3 外部样式表</h4><ul><li>外部样式表就是在html文件外创建一个后缀为.css的文件，然后html标签中使用link标签将外部.css文件引入到html文件中去使用</li><li>格式</li></ul><p>&lt;link rel=”stylesheet” href=”外部文件路径” type=”text/css” /&gt;</p><ul><li>创建外部样式表文件</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630480612231-e15e1d65-ac38-4c0a-84d2-9f8c78dc8991.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_16,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;styleCss.css&quot; type=&quot;text/css&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;内联样式&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;.demo&#123;    color: red;&#125;</code></pre><p>注：当三种样式表出现冲突时，三种样式表的优先级为  <strong>内联样式表&gt;内部样式表&gt;外部样式表</strong></p><h2 id="6-2-选择器"><a href="#6-2-选择器" class="headerlink" title="6.2 选择器"></a>6.2 选择器</h2><p>选择器是CSS 中一个重要的内容。使用它可以大幅度提高开发人员书写或修改样式表时的工作效率。</p><h4 id="6-2-1-属性选择器"><a href="#6-2-1-属性选择器" class="headerlink" title="6.2.1 属性选择器"></a>6.2.1 属性选择器</h4><p>在HTML中，通过各种各样的属性，我们可以给元素增加很多附加信息。例如，通过width属性，我们可以指定div元素的宽度，通过id属性，我们可以将不同的div元素进行区分，并且通过JavaScript来控制这个div元素的内容和状态。</p><h5 id="6-2-1-1-类选择器-class选择器"><a href="#6-2-1-1-类选择器-class选择器" class="headerlink" title="6.2.1.1 类选择器(class选择器)"></a>6.2.1.1 类选择器(class选择器)</h5><ul><li>在开始标签中添加class=””属性，并命名，在样式表中使用“.选择器名称{……}”可为该元素添加想要添加的样式属性</li><li>当然样式表中的样式与标签中的class=”选择名称”，可以理解为是标签引用了选择器中的样式，一个标签中可以引用多个类选择器样式，名称和名称之间用空格隔开</li><li>格式</li></ul><table><thead><tr><th>元素</th><th>样式表</th></tr></thead><tbody><tr><td>&lt;开始标签 class=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td><td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td></tr><tr><td>&lt;开始标签 class=”ClassName ClassNameTest”&gt;元素内容&lt;/结束标签&gt;</td><td>.ClassName{  样式属性:属性值;  样式属性:属性值;  ……}.ClassNameTest{  样式属性:属性值;  样式属性:属性值;  ……}</td></tr></tbody></table><p>类选择器样式是可以重复使用的，也就是说一个样式可以由多个元素共同使用，这样可以提供代码的复用性，但是需要注意在做网页结构布局的时候对于结构不要过多的复用代码，保不准后期需要更改结构模块，复用的代码可以是一些不更改结构的样式，如文字，颜色，等</p><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 100px;        &#125;        .color1&#123;            background-color: red;        &#125;        .color2&#123;            background-color: #3bee17;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo color1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;demo color2&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="6-2-1-2-id选择器"><a href="#6-2-1-2-id选择器" class="headerlink" title="6.2.1.2 id选择器"></a>6.2.1.2 id选择器</h5><ul><li>在开始标签中添加id=””属性，并命名，在样式表中使用“#选择器名称{……}”可为该元素添加想要添加的样式属性</li><li>需要注意的是id选择器是唯一的，不可复用的，它是一个元素的唯一标识</li></ul><table><thead><tr><th>元素</th><th>样式表</th></tr></thead><tbody><tr><td>&lt;开始标签 id=”ClassName”&gt;元素内容&lt;/结束标签&gt;</td><td>#ClassName{  样式属性:属性值;  样式属性:属性值;  ……}</td></tr></tbody></table><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        #myElement&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;myElement&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="6-2-1-3-通配选择器"><a href="#6-2-1-3-通配选择器" class="headerlink" title="6.2.1.3 通配选择器"></a>6.2.1.3 通配选择器</h5><ul><li>[att*=val]选择器</li></ul><p>[att*=val]属性选择器的含义是:如果元素用att表示的属性之属性值中包含用val指定的字符的话，则该元素使用这个样式。</p><ul><li>[att^=val]选择器</li></ul><p>[att^=val]属性选择器的含义是:如果元素用att表示的属性之属性值的开头字符为用val指定的字符的话，则该元素使用这个样式。</p><ul><li>[att$=val]选择器</li></ul><p>[att$=val]属性选择器的含义是:如果元素用att表示的属性之属性值的结尾字符为用val指定的字符的话，则该元素使用这个样式。</p><p>注：使用该属性时必须在指定匹配字符前加上“\”转义符，不能是纯数字</p><p>示例1</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;      /*只要包含e字符，全部添加一下样式*/        [class*=e]&#123;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>示例2</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        /*只要d开头，就添加以下样式*/        [class^=d]&#123;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element2&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo1&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element3&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo2&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element4&quot;&gt;这是元素&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>示例3</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        /*只要-2结尾，就添加以下样式*/        [class$=\-2]&#123;            background-color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;Element&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element-2&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo-1&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element-3&quot;&gt;这是元素&lt;/div&gt;    &lt;div class=&quot;demo-2&quot;&gt;这是文字&lt;/div&gt;    &lt;div class=&quot;Element-4&quot;&gt;这是元素&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-2-2-标签选择器"><a href="#6-2-2-标签选择器" class="headerlink" title="6.2.2 标签选择器"></a>6.2.2 标签选择器</h4><ul><li>标签选择顾名思义就是直接使用标签名在样式表中去给标签添加样式</li><li>注：标签选择器会给所有同名且没有其它选择器的标签添加相同的样式，不建议直接使用，可与结构选择器结合使用</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            color: #2279ee;        &#125;        div&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;这是一行字&lt;/div&gt;    &lt;div&gt;这是一行字&lt;/div&gt;    &lt;div class=&quot;demo&quot;&gt;这是一行字&lt;/div&gt;    &lt;div&gt;这是一行字&lt;/div&gt;    &lt;div&gt;这是一行字&lt;/div&gt;    &lt;div&gt;这是一行字&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-2-3-结构选择器"><a href="#6-2-3-结构选择器" class="headerlink" title="6.2.3 结构选择器"></a>6.2.3 结构选择器</h4><h5 id="6-2-3-1-后代选择器"><a href="#6-2-3-1-后代选择器" class="headerlink" title="6.2.3.1 后代选择器"></a>6.2.3.1 后代选择器</h5><ul><li>后代选择器又称包含选择器，后代选择器可以选择作为某元素后代（嵌套关系）的元素</li><li>我们可以定义后代选择器来创建一些规则，使这些规则在某些文档结构中起作用，而在另外一些结构中不起作用。</li><li>在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。每个空格结合符可以解释为“… 在 … 找到”、“… 作为 … 的一部分”、“… 作为 … 的后代”，但是要求必须从右向左读选择器。</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .dlOne dd p&#123;            color: white;            background-color: red;        &#125;        .dlOne dd a&#123;            color: #ff6700;        &#125;        .dlTwo dd p&#123;            color: white;            background-color: #ff50ef;        &#125;        .dlTwo dd a&#123;            color: #339fff;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;dl class=&quot;dlOne&quot;&gt;        &lt;dt&gt;            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;        &lt;/dt&gt;        &lt;dd&gt;            &lt;p&gt;这是一行字&lt;/p&gt;            &lt;a href=&quot;#&quot;&gt;这是另一行字&lt;/a&gt;        &lt;/dd&gt;    &lt;/dl&gt;    &lt;dl class=&quot;dlTwo&quot;&gt;        &lt;dt&gt;            &lt;img src=&quot;../images/mapImages/1.png&quot; alt=&quot;&quot;&gt;        &lt;/dt&gt;        &lt;dd&gt;            &lt;p&gt;这还是一行字&lt;/p&gt;            &lt;a href=&quot;#&quot;&gt;这又是另一行字&lt;/a&gt;        &lt;/dd&gt;    &lt;/dl&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="6-2-3-2-群组选择器"><a href="#6-2-3-2-群组选择器" class="headerlink" title="6.2.3.2 群组选择器"></a>6.2.3.2 群组选择器</h5><ul><li>要为不同的HTML元素定义相同的样式时，可以采用群组声明。</li><li>上述规则在选择器中指定了多个元素，元素之间用逗号来分隔。逗号告诉浏览器，规则中包含两个不同的选择器。这样的选择器叫群组选择器。</li><li>群组选择器可以减少样式的重复定义。可以把任意数量、任意类型的选择器放在群组中进行声明</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo,a&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;Byte科技&lt;/div&gt;    &lt;a href=&quot;#&quot;&gt;棒滴很！！！&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h5 id="6-2-3-3-序号子选择器"><a href="#6-2-3-3-序号子选择器" class="headerlink" title="6.2.3.3 序号子选择器"></a>6.2.3.3 序号子选择器</h5><ul><li> 序号选择器可以指定父元素中顺数或倒数某个子元素的样式</li><li>nth-child() 顺数</li><li>nth-last-child() 倒数</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        nav a:nth-child(1)&#123;            color: red;        &#125;        nav a:nth-child(2)&#123;            color: #339fff;        &#125;        nav a:nth-last-child(1)&#123;            background-color: #339fff;            color: white;        &#125;        nav a:nth-last-child(2)&#123;            background-color: #d442ff;            color: #fff800;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;nav&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;        &lt;a href=&quot;#&quot;&gt;导航&lt;/a&gt;    &lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-2-4-通用选择器"><a href="#6-2-4-通用选择器" class="headerlink" title="6.2.4 通用选择器"></a>6.2.4 通用选择器</h4><ul><li>通用选择器可以选择页面上的所有元素，并对它们应用样式，用 * 来表示。</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        *&#123;            color: red;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;这是一行字&lt;/div&gt;    &lt;p&gt;这还是一行字&lt;/p&gt;    &lt;a href=&quot;#&quot;&gt;这又是一行字&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-2-5-伪类选择器"><a href="#6-2-5-伪类选择器" class="headerlink" title="6.2.5 伪类选择器"></a>6.2.5 伪类选择器</h4><ul><li>伪类用于定义元素的特殊状态，由CSS提供</li><li>E:hover</li><li>E:active</li><li>E:link</li><li>E:visited</li><li>E:foucs</li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        a:link&#123;            color: #339fff;        &#125;        a:visited&#123;            color: #3bee17;        &#125;        a:hover&#123;            color: red;        &#125;        a:active&#123;            font-size: 25px;        &#125;        .inputEL:focus&#123;            background-color: #339fff;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;#&quot; class=&quot;demo&quot;&gt;这是一行字&lt;/a&gt;    &lt;form action=&quot;&quot;&gt;        &lt;input class=&quot;inputEL&quot; type=&quot;text&quot; required&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(五)CSS常用样式</title>
      <link href="/2022/07/08/%E4%BA%94-CSS%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F/"/>
      <url>/2022/07/08/%E4%BA%94-CSS%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>(五)CSS常用样式</p><span id="more"></span><h2 id="5-3-CSS-常用样式属性"><a href="#5-3-CSS-常用样式属性" class="headerlink" title="5.3 CSS 常用样式属性"></a>5.3 CSS 常用样式属性</h2><h4 id="5-3-1宽高"><a href="#5-3-1宽高" class="headerlink" title="5.3.1宽高"></a>5.3.1宽高</h4><ul><li><ul><li>宽width：像素值/百分比（上一级标签的百分之多少）</li><li>高height：像素值/百分比（上一级标签的百分之多少[注：当标签为body下的第一层标签时，高度使用百分比是不生效的]）</li><li>示例</li></ul></li></ul><table><thead><tr><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404127941-15c52bda-471e-4f8f-badd-94657b35432f.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_17,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404138115-693d3125-52b8-4fdc-b468-ab6f777ba28c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th><th><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404170319-5ab39ea2-c836-4221-9f15-35afbf841664.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="5-3-2文字"><a href="#5-3-2文字" class="headerlink" title="5.3.2文字"></a>5.3.2文字</h4><ul><li><ul><li>文字大小</li></ul></li><li><ul><li><ul><li>font-size：像素值</li></ul></li></ul></li><li><ul><li>文字颜色</li></ul></li><li><ul><li><ul><li>color:颜色单词/十六进制值/rgba值</li></ul></li></ul></li><li><ul><li>文字对齐方式</li></ul></li><li><ul><li><ul><li>text-align:居中/靠左/靠右</li></ul></li></ul></li><li><ul><li>文字的字体设置</li></ul></li><li><ul><li><ul><li>font-family:字体</li></ul></li></ul></li></ul><p>示例</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630404233490-92063cc0-c11a-41ea-8787-37e5c94c2d40.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_24,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="5-3-3浮动"><a href="#5-3-3浮动" class="headerlink" title="5.3.3浮动"></a>5.3.3浮动</h4><ul><li><ul><li>标准文档流</li></ul></li><li><ul><li><ul><li>web页面的制作不同于设计软件，它是个流，必须从上而下，先执行渲染显示上边的元素，依次向下渲染显示</li><li>我们知道元素分块级和行级元素两类，如果页面完全遵循文档流去开发就会导致很多页面排版不能实现或不能完全实现</li><li>通过浮动我们可以让元素脱离标准流，实现块级元素并排等一些效果</li></ul></li></ul></li><li><ul><li>浮动特点</li></ul></li><li><ul><li><ul><li>脱离标准流</li><li>元素并排（如果容器宽度足够元素则在容器宽度范围内并排，如果宽度不够则容器内元素会依次换行排列）</li><li>收缩（如果一个没有设置宽度的元素浮动，那么元素的宽度会自动收缩为内容宽度）</li></ul></li></ul></li><li><ul><li>注：在学习初期关于浮动要遵循的一个原则：<strong>不要让一个元素单独浮动，要浮一起浮，要么都别浮</strong></li><li>浮动属性</li></ul></li><li><ul><li><ul><li>左浮动    float:left;</li><li>右浮动    float:right</li></ul></li></ul></li></ul><p>脱标示例</p><table><thead><tr><th>代码</th><th>运行结果</th></tr></thead><tbody><tr><td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;             }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411052874-f74c9cef-be0c-4eb3-8305-7009f53bf4fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_15,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr><tr><td><!DOCTYPE html>&lt;html lang=<strong>“en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        width: 300</strong>px**;        height: 300<strong>px</strong>;        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }      .FBox{        width: 450<strong>px</strong>;        height: 450<strong>px</strong>;        background-color: <strong>aqua</strong>;      }    </style></head><body>  &lt;div class=**”box”**&gt;</div>  &lt;div class=**”FBox”**&gt;</div></body></html></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411089649-7e53a85f-5dec-427a-b4e5-f561b68a2fc9.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_18,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><p>收缩示例</p><table><thead><tr><th>代码</th><th>示例</th></tr></thead><tbody><tr><td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;       }    </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411191956-d9627364-0284-47bd-92c4-cd34f74deffa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_23,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr><tr><td><!DOCTYPE html>&lt;html lang=**”en”**&gt;<head>  &lt;meta charset=**”UTF-8”**&gt;  <title><strong>Title</strong></title>  <style>    .box{        background-color: <strong>red</strong>;        float: <strong>left</strong>;      }     </style></head><body>  &lt;div class=**”box”**&gt;<strong>这是一行字</strong></div></body></html></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630411233384-6aaacf3c-b4ed-49a6-a17f-da47de55c0fa.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><p>左浮动示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            background-color: red;            float: left;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>右浮动示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            background-color: red;            float: right;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;这是第一行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第二行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第三行字&lt;/div&gt;    &lt;div class=&quot;box&quot;&gt;这是第四行字&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="5-3-4背景"><a href="#5-3-4背景" class="headerlink" title="5.3.4背景"></a>5.3.4背景</h4><ul><li><ul><li>背景图 background-image:url(“图片地址”)</li></ul></li><li><ul><li><ul><li>注：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>在元素添加背景图时其运行时高度必须大于1</li><li>背景图处于元素的最底层不会占用元素内容的存储空间</li></ul></li></ul></li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 200px;            background-image: url(&quot;../images/mapImages/4.png&quot;);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><ul><li>背景图大小 background-size:宽度 高度；</li></ul></li><li><ul><li><ul><li>注：</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>为背景图设置大小时需要注意该图的纵横比（容易出现背景变形）</li></ul></li></ul></li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 200px;            background-image: url(&quot;../images/mapImages/1.png&quot;);            background-size: 100% 100%;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><ul><li>背景重复 background-repeat:no-repeat/repeat-x;repeat-y;</li></ul></li><li><ul><li><ul><li>当图片宽高小于容器宽高时图片默认会铺满整个容器，会导致背景重复</li><li>背景重复属性值默认为repeat（重复），也可以设置为</li></ul></li></ul></li><li><ul><li><ul><li><ul><li>no-repeat:不重复</li><li>repeat-x：X轴重复</li><li>repeat-y：Y轴重复</li></ul></li></ul></li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 200px;            background-image: url(&quot;../images/mapImages/1.png&quot;);            /*background-repeat: repeat-x;*/            /*background-repeat: repeat-y;*/            background-repeat: no-repeat;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><ul><li>背景位移 background-position:x轴值 Y轴值；</li></ul></li><li><ul><li><ul><li>当背景图大小小于容器大小的时候，容器中添加背景图后只能展示出部分背景图</li><li>通过背景位移，可以移动背景图片让容器中显示背景图中想要展示分部分</li><li>注：</li></ul></li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630463229523-5d0c94e2-3a53-4b6a-a6ba-5e109ae8913c.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100px;            height: 100px;            background-image: url(&quot;../images/mapImages/4.png&quot;);            background-repeat: no-repeat;            border: 1px solid black;            background-position: -56px -30px;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><ul><li>背景色 background-color:颜色单词/十六进制值/rgba值</li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 200px;            background-color: red;            /*background-color: #ff0000;*/            /*background-color: rgba(255, 0, 0, 0.71);*/        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><ul><li>背景渐变</li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100%;            height: 200px;            background:linear-gradient(#ff0000,#ffffff);        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="5-3-5阴影-box-shadow"><a href="#5-3-5阴影-box-shadow" class="headerlink" title="5.3.5阴影 box-shadow"></a>5.3.5阴影 box-shadow</h4><ul><li><ul><li>语法：</li></ul></li></ul><p>box-shadow: h-shadow v-shadow blur spread color inset;</p><ul><li><ul><li>属性值：</li></ul></li></ul><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需的。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需的。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影的大小</td></tr><tr><td>color</td><td>可选。阴影的颜色。在<a href="https://www.runoob.com/cssref/css_colors_legal.aspx">CSS颜色值</a>寻找颜色值的完整列表</td></tr><tr><td>inset</td><td>可选。从外层的阴影（开始时）改变阴影内侧阴影</td></tr></tbody></table><p>示例一</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100px;            height: 100px;            background-color: white;            box-shadow: 0px 0px 50px 2px gainsboro;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>示例二</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .demo&#123;            width: 100px;            height: 100px;            background-color: white;            box-shadow:    0px -10px 0px 0px #ff0000,   /*上边阴影  红色*/            -10px 0px 0px 0px #3bee17,   /*左边阴影  绿色*/            10px 0px 0px 0px #2279ee,    /*右边阴影  蓝色*/            0px 10px 0px 0px #eede15;    /*下边阴影  黄色*/            border-radius: 50%;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="5-3-6圆角-border-radius-圆角值"><a href="#5-3-6圆角-border-radius-圆角值" class="headerlink" title="5.3.6圆角 border-[--]radius:圆角值"></a>5.3.6圆角 border-[<em>-</em>-]radius:圆角值</h4><p>圆形示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: red;            border-radius: 50%;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>单角示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .box&#123;            width: 200px;            height: 200px;            background-color: red;            border-bottom-left-radius: 20px;            /*border-bottom-right-radius: 20px;*/            /*border-top-right-radius: 20px;*/            /*border-top-left-radius: 20px;*/                    &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(四)CSS3概述</title>
      <link href="/2022/07/08/%E5%9B%9B-CSS3%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/07/08/%E5%9B%9B-CSS3%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>(四)CSS3概述</p><span id="more"></span><h2 id="4-1-CSS概述"><a href="#4-1-CSS概述" class="headerlink" title="4.1 CSS概述"></a>4.1 CSS概述</h2><h4 id="4-1-1-CSS-是什么"><a href="#4-1-1-CSS-是什么" class="headerlink" title="4.1.1 CSS 是什么"></a>4.1.1 CSS 是什么</h4><p>CSS全称 Cascading Style Sheets层叠样式表，是一种用来表现文件样式的计算机语言。<br>1.CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。<br>2.CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式。<br>3.CSS拥有对网页对象和模型样式编辑的能力。<br>4.在主页制作时采用CSS技术，可以有效地对页面的布局、字体、颜色等效果实现更加精确的控制。</p><h4 id="4-1-2-CSS历史"><a href="#4-1-2-CSS历史" class="headerlink" title="4.1.2 CSS历史"></a>4.1.2 CSS历史</h4><p>接下来，我们从总体上看一下CSS的发展历史。</p><p>CSS 1。</p><p>1996年12月，CSS 1(Cascading Style Sheets,level 1)正式推出。在这个版本中，已经包含了font的相关属性、颜色与背景的相关属性、文字的相关属性、box的相关属性等。</p><p>CSS 2。</p><p>1998年5月，CSS 2(Cascading Style Sheets,level 2)正式推出。在这个版本中开始使用样式表结构。</p><p>CSS 2.1。</p><p>2004年2月，CSS 2.1(Cascading Style Sheets,level 2 revision 1)正式推出。它在CSS 2的基础上略微做了改动，删除了许多诸如text-shadow等不被浏览器所支持的属性。</p><p>现在所使用的CSS基本上是在1998年推出的CSS 2的基础上发展而来的。10年前在Internet刚开始普及的时候，就能够使用样式表来对网页进行视觉效果的统一编辑，确实是一件可喜的事情。但是在这10年间CSS可以说是基本上没有什么很大的变化，一直到2010年终于推出了一个全新的版本———CSS 3。</p><h2 id="4-2-使用CSS能做什么"><a href="#4-2-使用CSS能做什么" class="headerlink" title="4.2 使用CSS能做什么"></a>4.2 使用CSS能做什么</h2><h4 id="4-2-1-模块与模块化结构"><a href="#4-2-1-模块与模块化结构" class="headerlink" title="4.2.1 模块与模块化结构"></a>4.2.1 模块与模块化结构</h4><p>在CSS中，采用分工协作的模块化结构，如下表</p><table><thead><tr><th>模块名称</th><th>功能描述</th></tr></thead><tbody><tr><td>basic box model</td><td>定义各种与盒相关的样式</td></tr><tr><td>Line</td><td>定义各种与直线相关的样式</td></tr><tr><td>Lists</td><td>定义各种与列表相关的样式</td></tr><tr><td>Hyperlink Presentation</td><td>定义各种与超链接相关的样式。訾如锚的显示方式、激活时的视觉效果等</td></tr><tr><td>Presentation Levels</td><td>定义页面中元素的不同的样式级别</td></tr><tr><td>Speech</td><td>定义各种与语音相关的样式。譬如音量、音速、说话间歇时间等属性</td></tr><tr><td>Background and border</td><td>定义各种与背景和边框相关的样式</td></tr><tr><td>Text</td><td>定义各种与文字相关的样式</td></tr><tr><td>Color</td><td>定义各种与颜色相关的样式</td></tr><tr><td>Font</td><td>定义各种与字体相关的样式</td></tr><tr><td>Paged Media</td><td>定义各种页眉、页脚、页数等页面元数据的样式</td></tr><tr><td>Cascading and inheritance</td><td>定义怎样对属性进行赋值</td></tr><tr><td>Value and Units</td><td>将页面上各种各样的值与单位进行统一定义，以供其他模块使用</td></tr><tr><td>Image Values</td><td>定义对image元素的赋值方式</td></tr><tr><td>2D Transforms</td><td>在页面中实现2维空间上的变形效果</td></tr><tr><td>3D Transforms</td><td>在页面中实现3维空间上的变形效果</td></tr><tr><td>Transitions</td><td>在页面中实现平滑过渡的视觉效果</td></tr><tr><td>Animations</td><td>在页面中实现动画</td></tr><tr><td>CSSOM View</td><td>查看管理页面或页面的视觉效果，处理元素的位置信息</td></tr><tr><td>Syntax</td><td>定义CSS样式表的基本结构、样式表中的-一些语法细节、浏览器对于样式表的分析规则</td></tr><tr><td>Generated and Replaced Content</td><td>定义怎样在元素中插入内容</td></tr><tr><td>Marquee</td><td>定义当一些元素的内容太大，超出了指定的元素尺寸时，是否以及怎样显示溢出部分</td></tr><tr><td>Ruby</td><td>定义页面中ruby元素（用于显示拼音文字)的样式</td></tr><tr><td>Writing Modes</td><td>定义页面中文本数据的布局方式</td></tr><tr><td>Basic User Interface</td><td>定义在屏幕、纸张上进行输出时页面的渲染方式</td></tr><tr><td>Namespaces</td><td>定义使用命名空间时的语法</td></tr><tr><td>Media Queries</td><td>根据媒体类型来实现不同的样式</td></tr><tr><td>‘Reader’Media Type</td><td>定义用于屏幕阅读器之类的阅读程序时的样式</td></tr><tr><td>Multi-column Layout</td><td>在页面中使用多栏布局方式</td></tr><tr><td>Template Layout</td><td>在页面中使用特殊布局方式</td></tr><tr><td>Flexible Box Layout</td><td>创建自适应浏览器窗口的流动布局或自适应字体大小的弹性布局</td></tr><tr><td>Grid Position</td><td>在页面中使用网格布局方</td></tr><tr><td>Generated Content for Paged Media</td><td>在页面中使用印刷时使用的布局方式</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三)HTML5</title>
      <link href="/2022/07/08/%E4%B8%89-HTML5/"/>
      <url>/2022/07/08/%E4%B8%89-HTML5/</url>
      
        <content type="html"><![CDATA[<p> (三)HTML5<br> <span id="more"></span></p><h2 id="3-1新增元素"><a href="#3-1新增元素" class="headerlink" title="3.1新增元素"></a>3.1新增元素</h2><h4 id="3-1-1-新增的结构元素"><a href="#3-1-1-新增的结构元素" class="headerlink" title="3.1.1 新增的结构元素"></a>3.1.1 新增的结构元素</h4><ul><li>&lt;section&gt;元素</li></ul><p>&lt;section&gt;元素表示页面中的内容区块，如：页眉，页脚，章节等部分</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;section&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;section&gt;    &lt;h1&gt;区域一&lt;/h1&gt;    &lt;p&gt;这里是区域一的内容&lt;/p&gt;  &lt;/section&gt;  &lt;section&gt;   &lt;h1&gt;区域二&lt;/h1&gt;    &lt;p&gt;这里是区域二的内容&lt;/p&gt;  &lt;/section&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;article&gt;元素</li></ul><p>&lt;article&gt;元素表示页面中的一块与上下文不相关的独立内容，如：新闻页中诸多文章中的某篇文章</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;article&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;article&gt;    &lt;h1&gt;两个“万岁”&lt;/h1&gt;    &lt;p&gt;“伟大、光荣、正确的中国共产党万岁！”&lt;/p&gt;        &lt;p&gt;“伟大、光荣、英雄的中国人民万岁！”&lt;/p&gt;  &lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;aside&gt;元素</li></ul><p>&lt;aside&gt;表示&lt;article&gt;元素的内容之外的，它的内容应该与附近内容相关</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;aside&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;p&gt;神州十二号飞船成功升空&lt;/p&gt;  &lt;aside&gt;    &lt;h4&gt;飞船抵达中国空间站&lt;/h4&gt;    &lt;p&gt;6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。      通过使用最先进的快速交会对接自动化技术      这一切都要归功于从一次次太空飞行中总结的的经验。&lt;/p&gt;  &lt;/aside&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;header&gt;元素</li></ul><p>&lt;header&gt;元素表示页面中的一个内容块或整个页面的标题</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;header&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;article&gt;    &lt;header&gt;      &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;    &lt;/header&gt;    &lt;p&gt;      6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。      通过使用最先进的快速交会对接自动化技术      这一切都要归功于从一次次太空飞行中总结的的经验。    &lt;/p&gt;  &lt;/article&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;footer&gt;元素</li></ul><p>&lt;footer&gt;元素表示整个页面或页面中一个区域内的脚注，一般包含作者的基本信息</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;     &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;header&lt;/title&gt; &lt;/head&gt;&lt;body&gt;    &lt;article&gt;        &lt;header&gt;            &lt;h1&gt;飞船抵达中国空间站&lt;/h1&gt;        &lt;/header&gt;        &lt;p&gt;            6月19日上午，神舟十二号飞船抵达距离天和核心舱200米的停留点，开始进行对接准备。            通过使用最先进的快速交会对接自动化技术            这一切都要归功于从一次次太空飞行中总结的的经验。        &lt;/p&gt;    &lt;/article&gt;    &lt;footer&gt;        &lt;p&gt;&amp;copy;环球网&lt;/p&gt;          &lt;p&gt;发表时间：7-12&lt;/p&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;nav&gt;元素</li></ul><p>&lt;nav&gt;元素通常在内嵌套&lt;a&gt;标签表示页面的导航链接部分</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;nav&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;nav&gt;    &lt;a href=&quot;/html/&quot;&gt;HTML&lt;/a&gt; |    &lt;a href=&quot;/css/&quot;&gt;CSS&lt;/a&gt; |    &lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt; |    &lt;a href=&quot;/jquery/&quot;&gt;jQuery&lt;/a&gt;  &lt;/nav&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><p>&lt;video&gt;元素</p></li><li><ul><li>&lt;video&gt;元素用来插入视频</li><li>&lt;video&gt;元素仅支持MP4，WebM，Ogg视频格式</li><li>元素属性表：</li></ul></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/tags/att-video-autoplay.html">autoplay</a></td><td>autoplay</td><td>如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-controls.html">controls</a></td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-height.html">height</a></td><td>pixels</td><td>设置视频播放器的高度。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-loop.html">loop</a></td><td>loop</td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-muted.html">muted</a></td><td>muted</td><td>如果出现该属性，视频的音频输出为静音。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-poster.html">poster</a></td><td>URL</td><td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-preload.html">preload</a></td><td>autometadatanone</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-src.html">src</a></td><td>URL</td><td>要播放的视频的 URL。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-video-width.html">width</a></td><td>pixels</td><td>设置视频播放器的宽度。</td></tr></tbody></table><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;video&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;video width=&quot;320&quot; height=&quot;240&quot; controls&gt;    &lt;source src=&quot;movie.mp4&quot;  type=&quot;video/mp4&quot;&gt;    &lt;source src=&quot;movie.ogg&quot;  type=&quot;video/ogg&quot;&gt;    您的浏览器不支持 HTML5 video 标签。  &lt;/video&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><p>&lt;audio&gt;元素</p></li><li><ul><li>&lt;audio&gt;元素用来插入音频</li><li>&lt;audio&gt;元素仅支持Ogg和MP3格式</li><li>元素属性表</li></ul></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/tags/att-audio-autoplay.html">autoplay</a></td><td>autoplay</td><td>如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-audio-controls.html">controls</a></td><td>controls</td><td>如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-audio-loop.html">loop</a></td><td>loop</td><td>如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-audio-muted.html">muted</a></td><td>muted</td><td>如果出现该属性，则音频输出为静音。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-audio-preload.html">preload</a></td><td>autometadatanone</td><td>规定当网页加载时，音频是否默认被加载以及如何被加载。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-audio-src.html">src</a></td><td><em>URL</em></td><td>规定音频文件的 URL。</td></tr></tbody></table><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;audio&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;audio controls&gt;    &lt;source src=&quot;music.ogg&quot; type=&quot;audio/ogg&quot;&gt;    &lt;source src=&quot;music.mp3&quot; type=&quot;audio/mpeg&quot;&gt;  您的浏览器不支持 audio 元素。  &lt;/audio&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;mark&gt;元素</li></ul><p>&lt;mark&gt;元素主要用来在视觉上向用户呈现哪些需要突出显示或高亮显示的文字，一般用在搜索结果中向用户高亮显示搜索关键词</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;mark&lt;/title&gt; &lt;/head&gt;&lt;body&gt;  &lt;p&gt;神舟十二号航天员乘组圆满完成空间站阶段&lt;mark&gt;首次出舱&lt;/mark&gt;活动全部既定任务&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;ruby&gt;元素</li></ul><p>&lt;ruby&gt;表示中文注音或字符</p><ul><li>&lt;rt&gt;元素</li></ul><p>&lt;rt&gt;元素与&lt;ruby&gt;配合使用用来解释或发音</p><ul><li>&lt;rp&gt;元素</li></ul><p>&lt;rp&gt;元素与&lt;ruby&gt;一起使用，以定义不支持&lt;ruby&gt;元素的浏览器显示内容，以括号的形式出现如：汉字(Han Zi)</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;ruby,rt,rp  &lt;/title&gt; &lt;/head&gt;&lt;body&gt;&lt;ruby&gt;  汉 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Han&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;  字 &lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;zi&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>&lt;details&gt;元素</li></ul><details>元素表示用户要求得到的细节信息，与<summary>配合使用，<summary>提供标题或图例，用户点击标题时，会显示户细节信息，<summary>元素应该是<details>元素的第一个元素<p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;details&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;details&gt;        &lt;summary&gt;空间站&lt;/summary&gt;        空间站（space station）又称太空站、航天站。          是一种在近地轨道长时间运行、可供多名航天员巡访、长期工作和生活的载人航天器。          空间站分为单模块空间站和多模块空间站两种。          单模块空间站可由航天运载器一次发射入轨，多模块空间站则由航天运载器分批将各模块送入轨道，在太空中将各模块组装而成。          在空间站中要有人能够生活的一切设施，空间站不具备返回地球的能力。    &lt;/details&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3-2-全局属性"><a href="#3-2-全局属性" class="headerlink" title="3.2 全局属性"></a>3.2 全局属性</h2><h4 id="3-2-1-contentEditable属性"><a href="#3-2-1-contentEditable属性" class="headerlink" title="3.2.1 contentEditable属性"></a>3.2.1 contentEditable属性</h4><p>contentEditable属性由微软开发并被其它浏览器反编译投入引用的一个全局属性，该属性允许用户编辑元素内容，该属性是一个布尔值的属性，可以被指定false或true</p><p>该属性默认inherit（继承）状态，属性为true时，元素被指定为允许编辑；属性为false时，元素被指定为不允许编辑状态；未指定值时，则由inherit状态决定，如果父元素是可编辑元素，则该元素也可编辑</p><p>在编辑完成后，如果想要保存其中的内容，只能把该元素的innerHTML发送到服务器端进行保存，目前还没有特别的API来保存编辑后的元素内容</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;contenteditable&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul contenteditable=&quot;true&quot;&gt;        &lt;li&gt;这是预编译内容&lt;/li&gt;        &lt;li&gt;这是预编译内容&lt;/li&gt;        &lt;li&gt;这是预编译内容&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626161477737-77ec780f-ee67-4db7-aeff-ab2ff54b335d.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_19,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="3-2-2-designMode属性"><a href="#3-2-2-designMode属性" class="headerlink" title="3.2.2 designMode属性"></a>3.2.2 designMode属性</h4><p>designModel属性用来指定整个页面是否可编辑，当页面可编辑时，页面中任何支持contenteditable属性的元素都变成可编辑状态。该属性只能在JavaScript脚本里被编辑修改，该属性有两个值 “on”或“off”，当属性被指定为“on”时，页面为可编辑状态，为“off”时，页面不可编辑</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;designMode&lt;/title&gt;    &lt;script&gt;        document.designMode=&quot;on&quot;;    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;这是原有内容&lt;/li&gt;        &lt;li&gt;这是原有内容&lt;/li&gt;        &lt;li&gt;这是原有内容&lt;/li&gt;    &lt;/ul&gt;    &lt;a href=&quot;javascript:void(0)&quot;&gt;链接&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>运行结果：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1626162780404-4163f601-90ab-4986-abdd-5843a5cf39b4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_20,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></p><h4 id="3-2-3-hidden属性"><a href="#3-2-3-hidden属性" class="headerlink" title="3.2.3 hidden属性"></a>3.2.3 hidden属性</h4><p>在HTML 5中，所有的元素都允许使用一个hidden属性。该属性类似于input元素中的 hidden元素，功能是通知浏览器不渲染该元素。使该元素处干不可见状态。但是元素中的内容还是浏览器创建的，也就是说页面装载后允许使用JavaScript脚本将该属性取消，取消后该元素变为可见状态，同时元素中的内容也即时显示出来。Hidden属性是一个布尔值的属性。当设为true时，元素处于不可见状态;当设为false时，元素处于可见状态</p>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD中的HTML标签文字被网页编译问题</title>
      <link href="/2022/07/08/MD%E4%B8%AD%E7%9A%84HTML%E6%A0%87%E7%AD%BE%E6%96%87%E5%AD%97%E8%A2%AB%E7%BD%91%E9%A1%B5%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/08/MD%E4%B8%AD%E7%9A%84HTML%E6%A0%87%E7%AD%BE%E6%96%87%E5%AD%97%E8%A2%AB%E7%BD%91%E9%A1%B5%E7%BC%96%E8%AF%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>MD中的HTML标签文字被网页编译问题</p><span id="more"></span><h3 id="在每个标签前加上“-“进行转义"><a href="#在每个标签前加上“-“进行转义" class="headerlink" title="在每个标签前加上“\“进行转义"></a>在每个标签前加上“\“进行转义</h3>]]></content>
      
      
      <categories>
          
          <category> 问题组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(二)表单</title>
      <link href="/2022/07/08/%E4%BA%8C-%E8%A1%A8%E5%8D%95/"/>
      <url>/2022/07/08/%E4%BA%8C-%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>表单是用来显示，收集，提交用户信息，表单在网页中主要负责数据采集功能，一个表单由三个基本部分组成：表单元素、表单域、按钮</p><span id="more"></span><h2 id="2-1表单"><a href="#2-1表单" class="headerlink" title="2.1表单"></a>2.1表单</h2><p>表单是一个包含表单元素的区域，使用&lt;form&gt;…&lt;/form&gt;定义，通过在表单中添加对应的表单元素使得用户可以在网页上输入数据</p><p>&lt;form&gt;中含有诸多属性用来规定表单的格式，详见下表</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/tags/att-form-accept-charset.html">accept-charset</a></td><td><em>character_set</em></td><td>规定服务器可处理的表单数据字符集。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-action.html">action</a></td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-autocomplete.html">autocomplete</a></td><td>onoff</td><td>规定是否启用表单的自动完成功能。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-enctype.html">enctype</a></td><td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。（适用于 method=”post” 的情况）</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-method.html">method</a></td><td>getpost</td><td>规定用于发送表单数据的 HTTP 方法。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-name.html">name</a></td><td><em>text</em></td><td>规定表单的名称。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-novalidate.html">novalidate</a></td><td>novalidate</td><td>如果使用该属性，则提交表单时不进行验证。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-form-target.html">target</a></td><td>_blank_self_parent_top</td><td>规定在何处打开 action URL。</td></tr></tbody></table><h2 id="2-2-表单元素"><a href="#2-2-表单元素" class="headerlink" title="2.2 表单元素"></a>2.2 表单元素</h2><h4 id="2-2-1-输入标签"><a href="#2-2-1-输入标签" class="headerlink" title="2.2.1 输入标签"></a>2.2.1 输入标签</h4><p>多数情况下使用的表单元素是输入标签&lt;input&gt;</p><p>元素内输入类型有标签中的type属性定义，常用的元素类型如下表：</p><table><thead><tr><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>type=”text”</td><td>单行文本框，一般用来以明文的方式输入数据，如：用户名</td></tr><tr><td>type=”password”</td><td>密码框，密码字符不会以明文方式显示，而是以“*”，“·”替代</td></tr><tr><td>type=”color”</td><td>色盘，可以通过鼠标点击选择一个颜色，其值为十六进制值 如：#ff6700</td></tr><tr><td>type=”radio”</td><td>单选按钮，通过在标签中添加相同的name属性值，以多选一的效果 如：性别</td></tr><tr><td>type=”checkbox”</td><td>复选按钮，可以同时选中多个数据 如：爱好</td></tr><tr><td>type=”date”</td><td>日期类型，规定输入的数据类型必须为日期类型，谷歌内核的浏览器可以唤出浏览器自带的日期的控件选择日期 日期格式：yyyy-MM-dd</td></tr><tr><td>type=”time”</td><td>时间类型，规定输入的数据必须为时间</td></tr><tr><td>type=”month”</td><td>月类型，规定输入的数据类型必须为月份</td></tr><tr><td>type=”file”</td><td>文件类型，点击后可在本地选择文件</td></tr><tr><td>type=”number”</td><td>数字类型，外观与text文本框相似，但不允许输入数值以外的数据</td></tr><tr><td>type=”range”</td><td>数字范围选择器，具有max与min属性，使用滑动条的方式制定数值</td></tr><tr><td>type=”email”</td><td>邮箱类型，外观与文本框相似，其值必须为邮箱格式，浏览器会对其内容做简单的验证</td></tr><tr><td>type=”url”</td><td>url类型，外观与文本框相似，其中必须为url，浏览器会对其内容做简单验证</td></tr><tr><td>type=”hidden”</td><td>隐藏域，表单提供一个不在界面显示的文本域</td></tr></tbody></table><p>2.2.2 下拉标签</p><ul><li><p>&lt;select&gt;元素为表单控件，用于在表单中接收数据</p></li><li><ul><li>&lt;select&gt;元素可创建单选或多选菜单</li><li>&lt;option&gt;标签定义了菜单中的可选项</li></ul></li><li><p>下拉列表支持属性</p></li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/tags/att-select-autofocus.html">autofocus</a></td><td>autofocus</td><td>规定在页面加载时下拉列表自动获得焦点。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-disabled.html">disabled</a></td><td>disabled</td><td>当该属性为 true 时，会禁用下拉列表。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-form.html">form</a></td><td><em>form_id</em></td><td>定义 select 字段所属的一个或多个表单。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-multiple.html">multiple</a></td><td>multiple</td><td>当该属性为 true 时，可选择多个选项。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-name.html">name</a></td><td><em>text</em></td><td>定义下拉列表的名称。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-required.html">required</a></td><td>required</td><td>规定用户在提交表单前必须选择一个下拉列表中的选项。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-select-size.html">size</a></td><td><em>number</em></td><td>规定下拉列表中可见选项的数目。</td></tr></tbody></table><h4 id="2-2-3-按钮"><a href="#2-2-3-按钮" class="headerlink" title="2.2.3 按钮"></a>2.2.3 按钮</h4><ul><li>按钮在网页中一般用于提交，重置页面数据，也可以与javascript配置做一些交互响应事件</li><li>在HTML中按钮一般使用&lt;input&gt;或&lt;button&gt;来定义</li><li>按钮属性</li></ul><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/tags/att-button-autofocus.html">autofocus</a></td><td>autofocus</td><td>规定当页面加载时按钮应当自动地获得焦点。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-disabled.html">disabled</a></td><td>disabled</td><td>规定应该禁用该按钮。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-form.html">form</a></td><td><em>form_id</em></td><td>规定按钮属于一个或多个表单。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-formaction.html">formaction</a></td><td><em>URL</em></td><td>规定当提交表单时向何处发送表单数据。覆盖 form 元素的 action 属性。该属性与 type=”submit” 配合使用。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-formenctype.html">formenctype</a></td><td>application/x-www-form-urlencodedmultipart/form-datatext/plain</td><td>规定在向服务器发送表单数据之前如何对其进行编码。覆盖 form 元素的 enctype 属性。该属性与 type=”submit” 配合使用。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-formmethod.html">formmethod</a></td><td>get，post</td><td>规定用于发送表单数据的 HTTP 方法。覆盖 form 元素的 method 属性。该属性与 type=”submit” 配合使用。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-formnovalidate.html">formnovalidate</a></td><td>formnovalidate</td><td>如果使用该属性，则提交表单时不进行验证。覆盖 form 元素的 novalidate 属性。该属性与 type=”submit” 配合使用。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-formtarget.html">formtarget</a></td><td>_blank_self_parent_top<em>framename</em></td><td>规定在何处打开 action URL。覆盖 form 元素的 target 属性。该属性与 type=”submit” 配合使用。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-name.html">name</a></td><td><em>name</em></td><td>规定按钮的名称。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-type.html">type</a></td><td>buttonresetsubmit</td><td>规定按钮的类型。</td></tr><tr><td><a href="https://www.runoob.com/tags/att-button-value.html">value</a></td><td><em>text</em></td><td>规定按钮的初始值。可由脚本进行修改。</td></tr></tbody></table><ul><li><p>&lt;button&gt;与&lt;input&gt;按钮区别</p></li><li><ul><li>&lt;button&gt;按钮如果不设置type属性，在不同浏览器中可能会提交不同值</li><li>&lt;button&gt;按钮是成对出现的，可放置文本，图像等，&lt;input&gt;标签只能通过value属性为其设置文本</li><li>需要注意的是虽然&lt;button&gt;按钮可以嵌套其它标签，但不能再去嵌套按钮</li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form&gt;        &lt;p&gt;            文本：&lt;input type=&quot;text&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            密码：&lt;input type=&quot;password&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            颜色色：&lt;input type=&quot;color&quot;&gt;        &lt;/p&gt;        &lt;p&gt;单选：            男&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;            女&lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;        &lt;/p&gt;        &lt;p&gt;复选：            爱好1&lt;input type=&quot;checkbox&quot;&gt;            爱好2&lt;input type=&quot;checkbox&quot;&gt;            爱好3&lt;input type=&quot;checkbox&quot;&gt;            爱好4&lt;input type=&quot;checkbox&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            下拉：&lt;select name=&quot;&quot; &gt;                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;            &lt;/select&gt;县            &lt;select name=&quot;&quot; &gt;                &lt;option value=&quot;&quot;&gt;[请输入...]&lt;/option&gt;                &lt;option value=&quot;&quot;&gt;选择数据一&lt;/option&gt;                &lt;option value=&quot;&quot;&gt;选择数据二&lt;/option&gt;            &lt;/select&gt;村        &lt;/p&gt;        &lt;p&gt;            日期：&lt;input type=&quot;date&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            时间：&lt;input type=&quot;time&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            月份：&lt;input type=&quot;month&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            文件：&lt;input type=&quot;file&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            数字：&lt;input type=&quot;number&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            数字范围：&lt;input type=&quot;range&quot; max=&quot;10&quot; min=&quot;0&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            邮箱：&lt;input type=&quot;email&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            地址：&lt;input type=&quot;url&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            隐藏：&lt;input type=&quot;hidden&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            &lt;input type=&quot;submit&quot; value=&quot;input提交按钮&quot;&gt;            &lt;input type=&quot;reset&quot; value=&quot;input重置按钮&quot;&gt;            &lt;input type=&quot;button&quot; value=&quot;input按钮&quot;&gt;        &lt;/p&gt;        &lt;p&gt;            &lt;button type=&quot;submit&quot;&gt;button提交按钮&lt;/button&gt;            &lt;button type=&quot;reset&quot;&gt;button重置按钮&lt;/button&gt;            &lt;button type=&quot;button&quot;&gt;button按钮&lt;/button&gt;        &lt;/p&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="2-3-HTML5-表单增强"><a href="#2-3-HTML5-表单增强" class="headerlink" title="2.3 HTML5 表单增强"></a>2.3 HTML5 表单增强</h2><h4 id="2-3-1-form属性"><a href="#2-3-1-form属性" class="headerlink" title="2.3.1 form属性"></a>2.3.1 form属性</h4><p>在HTML4中，表单内的从属元素必须书写在表单内部，但在HTML5中，可以把它书写在页面的任意地方，然后给该元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素从属于指定的表单</p><p>示例</p><pre><code class="html">&lt;form id=&quot;formTest&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/form&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; form=&quot;formTest&quot;&gt;</code></pre><p>代码解析：</p><ol><li>第一个input标签从属form表单，它被书写在form表单内部，所以用不着对它指定form属性</li><li>第二个input表单被书写在form之外，但想要它从属form，这时就可以为其添加form属性并指定表单id让它从属form表单</li></ol><h4 id="2-3-2-formaction属性"><a href="#2-3-2-formaction属性" class="headerlink" title="2.3.2 formaction属性"></a>2.3.2 formaction属性</h4><p>在HTML 4中，一个表单内的所有元素都只能通过表单的action属性统一提交到另一个页面，而在HTML 5中可以给所有的提交按钮，诸如&lt;input type=”submit”&gt;、&lt;inputtype=”image”&gt;、&lt;button type=”submit”&gt;都增加不同的formaction属性，使得点击不同的按钮，可以将表单提交到不同的页面，formaction属性的使用方法如下：</p><pre><code class="html">&lt;form id=&quot;testform&quot; action=&quot; serve.jsp&quot;&gt;  &lt;input type=&quot;submit&quot; name=&quot;s1&quot; value=&quot;v1&quot; formaction=&quot;s1.jsp&quot;&gt;提交到s1  &lt;input type=&quot;submit&quot; name=&quot;s2&quot; value=&quot;v2&quot; formaction=&quot;s2.jsp&quot;&gt;提交到s2  &lt;input type=&quot;submit&quot; name=&quot;s3&quot; value=&quot;v3&quot; formaction=&quot;s3.jsp&quot;&gt;提交到s3  &lt;input type= &quot;submit&quot;&gt;&lt;form&gt;</code></pre><p><strong>注：该属性目前支持的浏览器并不多，慎重使用</strong></p><h4 id="2-3-3-list属性"><a href="#2-3-3-list属性" class="headerlink" title="2.3.3 list属性"></a>2.3.3 list属性</h4><p>在HTML 5中，为单行文本框(&lt;input type=”text”&gt;)增加了一个list属性，该属性的值为某个datalist元素的id。datalist元素也是HTML 5中新增元素，该元素类似于选择框( select&gt;)，但是当用户想要设定的值不在选择列表之内时，允许其自行输入。该元素本身并不显示，而是当文本框获得焦点时以提示输入的方式显示。为了避免在没有支持该元素的浏览器上出现显示错误，可以用CSS等将它设定为不显示。</p><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    text: &lt;input type=&quot;text&quot; name=&quot; greeting&quot; list=&quot;greetings&quot;&gt;    &lt;datalist id=&quot;greetings&quot;&gt;        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;    &lt;/datalist&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-3-4-autocomplete属性"><a href="#2-3-4-autocomplete属性" class="headerlink" title="2.3.4 autocomplete属性"></a>2.3.4 autocomplete属性</h4><p>辅助输入所用的自动完成功能，是一个节省输入时间，同时也十分方便的功能。在HTML5之前，因为谁都可以看见输入的值，所以存在安全隐患，但只要使用autocomplete属性，安全性就可以得到很好的控制。.</p><p>对于autocomplete属性，可以指定“on”、“off”与“”(不指定）这三种值。不指定时，使用浏览器的默认值(取决于各浏览器的决定)。把该属性设为on时，可以显式指定候补输入的数据列表。使用detalist元素与list属性提供候补输入的数据列表，自动完成时，可以将该datalist元素中的数据作为候补输入的数据在文本框中自动显示。autocomplete属性的使用方法如下所示。</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    text: &lt;input type=&quot;text&quot; name=&quot;greeting&quot; list=&quot;greetings&quot; autocomplete=&quot;on&quot;&gt;    &lt;datalist id=&quot;greetings&quot;&gt;        &lt;option value=&quot;Good Morning&quot;&gt;Good Morning&lt;/option&gt;        &lt;option value=&quot;Hello&quot;&gt;Hello&lt;/option&gt;        &lt;option value=&quot;Good Afternoon&quot;&gt;Good Afternoon&lt;/option&gt;    &lt;/datalist&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-3-5-output标签"><a href="#2-3-5-output标签" class="headerlink" title="2.3.5 output标签"></a>2.3.5 output标签</h4><ul><li>output为H5的新增标签，用来定义不同类型的输出，长和form表单一起使用，用来输出显示计算结果</li><li>语法</li></ul><p>&lt;output name=”名称” for=”element_id”&gt;默认内容&lt;/output&gt;</p><ul><li><p>标签属性</p></li><li><ul><li>for：定义输出域相关的一个或多个元素，以空格隔开；</li><li>form：定义输入字段所属的一个或多个表单，以空格隔开；</li><li>name：定义对象的唯一名称（表单提交时使用）。</li></ul></li></ul><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form oninput=&quot;o.value=parseInt(a.value)&quot;&gt;        选择数字范围：&lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;100&quot; id=&quot;a&quot;&gt;        &lt;output id=&quot;o&quot; &gt;50&lt;/output&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>示例二</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;        &lt;input type=&quot;number&quot; id=&quot;a&quot; value=&quot;0&quot;&gt; +        &lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;0&quot;&gt; =        &lt;output name=&quot;x&quot; for=&quot;a b&quot;&gt;0&lt;/output&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>注：</p><p>oninput为表单事件，表示当对元素输入数据时触发</p><p>parseInt为javascript函数，用来解析一个字符串，并返回一个整数</p><h4 id="2-3-6-表单验证"><a href="#2-3-6-表单验证" class="headerlink" title="2.3.6 表单验证"></a>2.3.6 表单验证</h4><p>在H5中，新增了大量在提交时对表单与表单内新增元素进行有效性验证的功能</p><h5 id="2-3-6-1-自动验证"><a href="#2-3-6-1-自动验证" class="headerlink" title="2.3.6.1 自动验证"></a>2.3.6.1 自动验证</h5><p>在H5中，新增的一些表单元素本身就带有简单的提交格式验证，如邮箱（email）就有固定的格式“@”，“.”，但普通的表单元素就要通过对元素使用属性的方法，来实现在表单提交时执行自动验证的功能</p><table><thead><tr><th>代码示例</th><th>图示</th></tr></thead><tbody><tr><td>&lt;form action=**””**&gt;  &lt;input type=**”email”**&gt;  &lt;input type=**”submit”**&gt;</form></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396669228-351c8049-6a87-4b61-896d-4654ecf82402.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_11,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr><tr><td>&lt;form action=**””**&gt;     &lt;input type=**”url”**&gt;     &lt;input type=**”submit”**&gt; </form></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396965883-3328df19-69b6-46f4-944a-57e10cceb3c4.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_13,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><p>普通表单元素的验证属性</p><ol><li>required属性</li></ol><p>HTML 5中新增的required属性可以应用在大多数输入元素上（除了隐藏元素、图片元素按钮上)。在提交时，如果元素中内容为空白，则不允许提交，同时在浏览器中显示信息提示文字，提示用户这个元素中必须输入内容。</p><table><thead><tr><th>代码示例</th><th>图示</th></tr></thead><tbody><tr><td>&lt;form action=**””**&gt;     &lt;input type=**”text”** required&gt;     &lt;input type=**”submit”**&gt; </form></td><td><img src="https://cdn.nlark.com/yuque/0/2021/png/22038106/1630396887922-636d1b76-d057-4a4a-b4f7-c586e0a524cd.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_14,text_Qnl0ZeWtpumZog==,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10" alt="img"></td></tr></tbody></table><ol><li>pattern属性</li></ol><p>之前提到的一些新增的input元素，譬如email、number、url等，要求输入内容符合–定的格式，对input元素使用pattern属性，并且将属性值设为某个格式的正则表达式，在提交时会检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交，同时在浏览器中显示信息提示文字，提示输入的内容必须符合给定格式。譬如下面所示，要求输入内容为三个大写字母。</p><table><thead><tr><th>&lt;form action=**””**&gt;  &lt;input type=**”text”** placeholder=**”****请输入三个大写字母****”** required pattern=**”[A-Z]{3}”**&gt;  &lt;input type=**”submit”**&gt;</form></th></tr></thead><tbody><tr><td><img src="https://s2.loli.net/2022/07/08/RZVXKCHWeonvgSr.png" alt="image (1).png"></td></tr></tbody></table><ol><li>min属性与max属性</li></ol><p>min与max这两个属性是数值类型或日期类型的input元素的专用属性，它们限制了在input元素中输入的数值与日期的范围。</p><table><thead><tr><th>代码示例</th><th>图示</th></tr></thead><tbody><tr><td>&lt;form action=**””**&gt;  &lt;input type=**”number”** required min=**”1”** max=**”100”**&gt;  &lt;input type=**”submit”**&gt;</form></td><td><img src="https://s2.loli.net/2022/07/08/JdoXgQhPUmBK2fC.png" alt="image.png"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)走进HTML</title>
      <link href="/2022/07/08/%E4%B8%80-%E8%B5%B0%E8%BF%9BHTML/"/>
      <url>/2022/07/08/%E4%B8%80-%E8%B5%B0%E8%BF%9BHTML/</url>
      
        <content type="html"><![CDATA[<p> 走进HTML</p><span id="more"></span><h2 id="HTML的开发环境和运行环境"><a href="#HTML的开发环境和运行环境" class="headerlink" title="HTML的开发环境和运行环境"></a>HTML的开发环境和运行环境</h2><p>HTML本质上就是一个文档，市面上常见的一些简单的文本编辑器都是可以用来开发HTML，编辑之后只需将后缀修改为”.html”即可 如：记事本，EditPlus等</p><p>前端开发也有众多专业的开发软件，如：Webstrom，Sublime Text，Dreamweaver，HBuilder等，本书主要以webstrom为主要开发软件</p><p>HTML运行环境即各种浏览器，如:IE，edge，Chrome，Firefox，Safari等均可作为HTML的运行环境</p><h2 id="HTML文档结构"><a href="#HTML文档结构" class="headerlink" title="HTML文档结构"></a>HTML文档结构</h2><p>HTML文档有明确的文档结构，包含三个部分：&lt;HTML&gt;中包含&lt;head&gt;…&lt;/head&gt;部分和&lt;body&gt;…&lt;/body&gt;部分</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><ol><li>创建html文件，并键入如下代码：</li></ol><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;我的第一个网页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    Hello World&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>HTML文档由HTML元素定义，一个基本元素由“开始标签”，“元素内容”，“结束标签”构成</p><h2 id="块级标签和行级标签"><a href="#块级标签和行级标签" class="headerlink" title="块级标签和行级标签"></a>块级标签和行级标签</h2><p>HTML中，所有标签都是预定义的，也就是说所有的标签都有各自的特点属性，根据这些特点可将标签分为块级标签和行级标签两类</p><h4 id="块级标签"><a href="#块级标签" class="headerlink" title="块级标签"></a>块级标签</h4><p>块级标签编译后在浏览器中默认没有高度，其高度由其添加的内容决定，其宽度默认为屏幕宽度，也就是说块级标签默认占一行</p><h4 id="行级标签"><a href="#行级标签" class="headerlink" title="行级标签"></a>行级标签</h4><p>行级标签编译后在浏览器中默认没有宽度和高度，其宽高均有添加的内容决定，也就是说行级标签在其内容不满一行时不会换行</p><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h4 id="常用的块级标签"><a href="#常用的块级标签" class="headerlink" title="常用的块级标签"></a>常用的块级标签</h4><ul><li><p>标题标签</p></li><li><ul><li><p>标题（Heading）通过&lt;h1&gt;….&lt;h6&gt;标签定义，表示一级标题至六级标题，其中&lt;h1&gt;最大，&lt;h6&gt;最小</p></li><li><p>标题标签只用于标题</p></li><li><p>标题标签不单单用于字体放大加粗，更多的是为搜索引擎使用标题帮助网页索引</p><pre><code class="html">    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;标题标签&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;h1&gt;一级标题&lt;/h1&gt;    &lt;h2&gt;二级标题&lt;/h2&gt;    &lt;h3&gt;三级标题&lt;/h3&gt;    &lt;h4&gt;四级标题&lt;/h4&gt;    &lt;h5&gt;五级标题&lt;/h5&gt;    &lt;h6&gt;六级标题&lt;/h6&gt;    &lt;/body&gt;</code></pre></li></ul></li><li><p>段落标签</p></li><li><ul><li>段落通过&lt;p&gt;…&lt;/p&gt;标签定义，表示文档中的一个自然段</li><li>注：段落标签不能嵌套使用，若想要段落标签中的内容换行显示可使用&lt;br/&gt;标签换行<br>```html<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Title</title></head><body><p>面朝大海，春暖花开<br/>作者: 海子</p><p>从明天起，做一个幸福的人</p><p>喂马，劈柴，周游世界</p><p>从明天起，关心粮食和蔬菜</p><p>我有一所房子，面朝大海，春暖花开</p><p>从明天起，和每一个亲人通信</p><p>告诉他们我的幸福</p><p>那幸福的闪电告诉我的</p><p>我将告诉每一个人</p><p>给每一条河每一座山取一个温暖的名字</p><p>陌生人，我也为你祝福</p><p>愿你有一个灿烂的前程</p><p>愿你有情人终成眷属</p><p>愿你在尘世获得幸福</p><p>我只愿面朝大海，春暖花开</p></body></html></li></ul><p>```</p></li><li><p>div标签</p></li><li><ul><li>div标签用于定义文档中的分区或节</li><li>可以把文档分割为独立的，不同的部分</li><li>在后期通过学习样式表，div可以与CSS配合对整个网页进行页面布局，模块划分，让网页制作不再有难度</li><li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li></ul></li><li><ul><li>div若不带样式单独使用则与段落标签&lt;p&gt;相似，没有特定的含义</li></ul></li></ul><p>代码</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;无序列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;          这是div标签，用于页面划分页面布局      &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><p>无序列表</p></li><li><ul><li><p>列表可以结合链接标签用来定义新闻标题等一些较为常用的标题类链接</p></li><li><p>无序列表使用&lt;ul&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用黑色小圆点进行标记</p></li><li><p>通过在&lt;ul&gt;中添加type属性更改列表的展示标记，其中disc表示实心圆，square表示矩形显示，circle表示空心圆</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;无序列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;    &lt;/ul&gt;    &lt;ul type=&quot;square&quot;&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;    &lt;/ul&gt;    &lt;ul type=&quot;circle&quot;&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;        &lt;li&gt;热烈庆祝xxx同学高薪就业&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li><li><p>有序列表</p></li><li><ul><li><p>有序列表使用&lt;ol&gt;定义列表，&lt;li&gt;定义列表中的条目，默认此列项目使用阿拉伯数字进行标记</p></li><li><p>通过在&lt;ol&gt;中添加type属性更改列表的展示标记，其中‘A’表示大写字母，‘a’表示小写字母，‘I’表示大写罗马数字，‘i’表示小写罗马数字，‘1’表示阿拉伯数字（默认）</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;有序列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h3&gt;工作流程&lt;/h3&gt;    &lt;ol&gt;        &lt;li&gt;每日晨会，任务分配&lt;/li&gt;        &lt;li&gt;工作任务&lt;/li&gt;        &lt;li&gt;工作日报&lt;/li&gt;        &lt;li&gt;下班回家&lt;/li&gt;    &lt;/ol&gt;    &lt;ol type=&quot;A&quot;&gt;          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;          &lt;li&gt;工作任务&lt;/li&gt;          &lt;li&gt;工作日报&lt;/li&gt;          &lt;li&gt;下班回家&lt;/li&gt;    &lt;/ol&gt;    &lt;ol type=&quot;a&quot;&gt;          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;          &lt;li&gt;工作任务&lt;/li&gt;          &lt;li&gt;工作日报&lt;/li&gt;          &lt;li&gt;下班回家&lt;/li&gt;    &lt;/ol&gt;    &lt;ol type=&quot;I&quot;&gt;          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;          &lt;li&gt;工作任务&lt;/li&gt;          &lt;li&gt;工作日报&lt;/li&gt;          &lt;li&gt;下班回家&lt;/li&gt;    &lt;/ol&gt;    &lt;ol type=&quot;i&quot;&gt;          &lt;li&gt;每日晨会，任务分配&lt;/li&gt;          &lt;li&gt;工作任务&lt;/li&gt;          &lt;li&gt;工作日报&lt;/li&gt;          &lt;li&gt;下班回家&lt;/li&gt;     &lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li><li><p>自定义列表</p></li><li><ul><li><p>使用&lt;dl&gt;定义列表，&lt;dt&gt;定义列表中的项目，&lt;dd&gt;定义列表条目</p></li><li><p>自定义列表不单单只用了区分项目，后期通过样式，标签嵌套可以胜任诸多任务，如：商城，外卖类网站商品的模块划分</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;自定义列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;dl&gt;        &lt;dt&gt;pc端游戏&lt;/dt&gt;        &lt;dd&gt;穿越火线&lt;/dd&gt;        &lt;dd&gt;英雄联盟&lt;/dd&gt;        &lt;dd&gt;CSGO&lt;/dd&gt;        &lt;dt&gt;手机游戏&lt;/dt&gt;        &lt;dd&gt;和平精英&lt;/dd&gt;        &lt;dd&gt;王者荣耀&lt;/dd&gt;        &lt;dd&gt;阴阳师&lt;/dd&gt;    &lt;/dl&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li><li><p>嵌套列表</p></li><li><ul><li><p>列表可以通过多层嵌套实现多级列表</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;嵌套列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;茶            &lt;ul&gt;                &lt;li&gt;白茶&lt;/li&gt;                &lt;li&gt;绿茶&lt;/li&gt;                &lt;li&gt;红茶&lt;/li&gt;            &lt;/ul&gt;        &lt;/li&gt;        &lt;li&gt;咖啡            &lt;ul&gt;                &lt;li&gt;拿铁&lt;/li&gt;                &lt;li&gt;卡布奇洛&lt;/li&gt;            &lt;/ul&gt;        &lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li></ul><h4 id="常用的行级标签"><a href="#常用的行级标签" class="headerlink" title="常用的行级标签"></a>常用的行级标签</h4><ul><li><p>内联元素</p></li><li><ul><li><p>使用&lt;span&gt;…&lt;span&gt;表示</p></li><li><p>单独使用没有特定的含义</p></li><li><p>当与CSS一同使用，用来组合文档中的行内元素，如：在一行文字中给某一个字单独设置样式，再或者在某行字中添加小图标</p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;span&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;p&gt;        &lt;span style=&quot;font-size: 33px&quot;&gt;我&lt;/span&gt;        最        &lt;span style=&quot;font-size: 33px&quot;&gt;帅&lt;/span&gt;    &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li><li><p>链接标签</p></li><li><ul><li>使用&lt;a href=”url”&gt;…&lt;/a&gt;表示</li><li>用于从一个页面跳转到另一个页面</li><li>href表示跳转的链接目标</li><li>默认情况下链接将以以下形式出现在网页中</li></ul></li><li><ul><li><ul><li>在未点击访问时链接字体程蓝色并带同色下划线</li><li>在点击后链接字体会程红色显示并带同色下划线</li></ul></li></ul></li><li><ul><li>标签常用属性<br><img src="https://s2.loli.net/2022/07/08/q4JpNFAyeStIfE5.png" alt="img"></li></ul></li><li><ul><li>在网页开发中常用的链接有以下四种：<br><img src="https://s2.loli.net/2022/07/08/SUz5vErMnaX4HFx.png" alt="img"></li></ul></li></ul><p>附：</p><p>空链接“#”与“javascript:void(0)”的区别：</p><ol><li>“#”包含一个位置信息，默认为网页顶端，当页面高度大于一屏时，点击后会跳转到网页顶部</li><li>“javascript:void(0)”是一个伪协议，表示url内容通过javascript执行，而void(0)则表示不作任何操作，这样该标签既保留了链接样式还能防止页面跳转</li><li>空链接通常通过添加javascript事件去做一些其它操作，如：设置收藏，设置首页，弹窗等，这些会在本书javascript事件章节详细讲解</li></ol><p>附：</p><p>绝对路径和相对路径</p><p>绝对路径：是指文件在硬盘上的真正存在的路径，如：一张名为“头像.jpg”的图片或一个名为“index.html”的网页存放在我计算机中的“C:\Users\document\WebstormProjects\untitled15”目录中，则图片的绝对路径为“C:\Users\document\WebstormProjects\untitled15\头像.jpg”，网页的绝对路径为“C:\Users\document\WebstormProjects\untitled15\index.html”，但在开发时很少使用绝对路径，当指定了决定路径后在项目路径在本地计算机上是没问题的，但上传到服务器或在其它计算机上时很可能会出现找不到路径，路径错误等问题。</p><p>相对路径：指由文件本身相对于目标文件的路径，使用相对路径的三种写法，下边以网页index.html引用网页Login.html为例说明：</p><p>1.若Login.html相对index.html是在同一目录，那么网页在引用图片时则只需要通过Login.html名称+后缀引用即可</p><p>2.若网页Login.html存在某个文件夹中，文件夹与网页index.html属于同一目录，那么网页index.html在引用网页Login.html时则需要通过找到文件夹使用分隔符“/”才能找到文件夹中相对的网页Login.html文件，这里需要注意：绝对路径使用分隔符“\”，相对路径使用分隔符“/”</p><p>3.若网页index.html和网页Login.html都存在不同的文件夹中，两个不同的文件夹属于同一目录，那么网页index.html在引用网页Login.html时则需要通过“../”返回上一级路径再去引用存放网页Login.html的文件夹再使用分隔符“/”引用网页Login.html，这里需要注意一个“../”，表示网上返回一级，如果要返回多个则需要使用多个“../”</p><pre><code>锚链接示例代码：    ```html    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;a id=&quot;top&quot;&gt;这是网页顶部&lt;/a&gt;    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;    &lt;p&gt;网页内容&lt;/p&gt;    &lt;p&gt;....&lt;/p&gt;    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;    &lt;a id=&quot;middle&quot;&gt;这是网页中部&lt;/a&gt;    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;    &lt;a href=&quot;#bottom&quot;&gt;跳转至网页底部&lt;/a&gt;    &lt;p&gt;网页内容&lt;/p&gt;    &lt;p&gt;....&lt;/p&gt;    &lt;p&gt;这里省略若干行相同内容&lt;/p&gt;    &lt;a href=&quot;#middle&quot;&gt;跳转至网页中部&lt;/a&gt;    &lt;a href=&quot;#top&quot;&gt;跳转至网页顶部&lt;/a&gt;    &lt;a id=&quot;bottom&quot;&gt;这是网页底部&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>附：</p><ol><li>锚链接是在页面内的不同位置跳转，本质上就是元素间的跳转</li><li>使用锚链接首先要建立锚点目标，只需要给元素添加id或name属性即可 如：&lt;a name=”top”&gt;,&lt;div id=”top”&gt;</li><li>建立好锚点目标后再使用&lt;a href=”#id值或name值”&gt;引用锚点</li><li>如果不同页面跳转，同时存在锚点，则先跳转到要跳转的页面，然后在寻找锚点元素进行跳转</li></ol><pre><code class="html">        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;首页&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;a href=&quot;demo.html#bottom&quot;&gt;走你&lt;/a&gt;        &lt;/body&gt;        &lt;/html&gt;        &lt;!DOCTYPE html&gt;        &lt;html lang=&quot;en&quot;&gt;        &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;测试页&lt;/title&gt;        &lt;/head&gt;        &lt;body&gt;            &lt;p&gt;这是内容&lt;/p&gt;            &lt;p&gt;.....&lt;/p&gt;            &lt;p&gt;此时省略若干行相同内容&lt;/p&gt;            &lt;p&gt;这是内容&lt;/p&gt;            &lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;        &lt;/body&gt;        &lt;/html&gt;</code></pre><ul><li><p>图片标签</p></li><li><ul><li>图片标签使用&lt;img/&gt;表示，图片标签没有结束标签“/”表示结束</li><li>标签属性<br>  <img src="https://s2.loli.net/2022/07/08/YRABTNJk15doKQi.png" alt="img"></li></ul><p>代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;图片标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;img src=&quot;F.jpg&quot; alt=&quot;这是替换文本&quot; title=&quot;这是一张图片&quot; width=&quot;600&quot; height=&quot;406&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>```</p></li></ul><ul><li><p>图片增强（map）</p></li><li><ul><li><p>&lt;map&gt;标签有助于定义图像映射。图像映射指的是图像中包含一个或多个可点击区域。&lt;map&gt;标签与&lt;area&gt;标签一起确定可点击区域。可点击区域可以是矩形、圆形或多边形区域这些形状之一。如果不指定形状，就会认为是整个图像</p><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;img src=&quot;../images/mapImages/4.png&quot; width=&quot;592&quot; height=&quot;182&quot; alt=&quot;mapSelect&quot; usemap=&quot;#circusmap&quot;&gt;        &lt;map name=&quot;circusmap&quot;&gt;            &lt;area shape=&quot;rect&quot; coords=&quot;82,70,155,133&quot; href=&quot;map2.html&quot;&gt;            &lt;area shape=&quot;rect&quot; coords=&quot;297,70,387, 133&quot; href=&quot;map1.html&quot;&gt;            &lt;area shape=&quot;rect&quot; coords=&quot;480,70,572, 133&quot; href=&quot;map3.html&quot;&gt;        &lt;/map&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul></li></ul><p>知识补充：</p><ul><li><p>&lt;area&gt;标签定义图像映射中的区域</p><p>​    shape属性 </p><p>​             shape属性用于定义图像映射中对鼠标敏感的区域的形状</p><p>​                    圆形（circ或circle）</p><p>​                    多边形（poly或polygon）</p><p>​                    矩形（rect或rectangle）</p><p>​    coords属性</p><p>​                    圆形：shape=”circle”，coords=”x,y,z”</p><p>​                    这里的 x 和 y 定义了圆心的位置（”0,0” 是图像左上角的坐标），z 是以像素为单位的圆形半径。</p><p>​                    多边形：shape=”polygon”，coords=”x1,y1,x2,y2,x3,y3,…”</p><p>​                    每一对 “x,y” 坐标都定义了多边形的一个顶点（”0,0” 是图像左上角的坐标）。定义三角形至少需要三组坐标；高纬多边形则需要更多数量的顶点。</p><p>​                    多边形会自动封闭，因此在列表的结尾不需要重复第一个坐标来闭合整个区域。</p><p>​                    矩形：shape=”rectangle”，coords=”x1,y1,x2,y2”</p><p>​                    第一个坐标是矩形的一个角的顶点坐标，另一对坐标是对角的顶点坐标，”0,0” 是图像左上角的坐标。请注意，定义矩形实际上是定义带有四个顶点的多边形的一种简化方法。</p></li><li><p>常用文本格式化标签<br><img src="https://s2.loli.net/2022/07/08/obBW4smqSA1EpVL.png" alt="img"></p><p>代码：</p><pre><code class="html">&lt;!DOCTYPE HTML&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;b&gt;定义粗体文本&lt;/b&gt;&lt;br/&gt;&lt;em&gt;定义着重文字&lt;/em&gt;&lt;br/&gt;&lt;i&gt;定义斜体文字&lt;/i&gt;  &lt;br/&gt;&lt;small&gt;定义小号文字&lt;/small&gt;&lt;br/&gt;&lt;strong&gt;定义加重语气&lt;/strong&gt;&lt;br/&gt;定义下标字 &lt;sub&gt;aa&lt;/sub&gt;&lt;br/&gt;定义上标字 &lt;sup&gt;aa&lt;/sup&gt;&lt;br/&gt;&lt;ins&gt;定义插入字(加了下划线)&lt;/ins&gt;&lt;br/&gt;&lt;del&gt;定义删除字(加了删除线)&lt;/del&gt;&lt;/body&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript对象</title>
      <link href="/2022/07/07/JavaScript%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/07/JavaScript%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>JavaScript对象</p><span id="more"></span><ul><li><p>什么是对象</p><ul><li>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。</li><li>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。</li><li>在JavaScript中对象可以从其它对象继承属性。</li><li>JavaScript对象是动态的，即可以动态的添加和删除对象属性。</li></ul></li><li><p>认识对象</p><ul><li>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）<pre><code class="html">  &lt;script&gt;    let person = new Object();    person.name = &quot;zhangsan&quot;;    person.age = 18;    person.job = &quot;Teacher&quot;;     console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);    person.work = function()&#123;&#125;    ---    let person = &#123;    name = &quot;zhangsan&quot;,    age = 18,    job = &quot;Teacher&quot;,    work()&#123;    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);    &#125;    &#125;    &lt;/script&gt;</code></pre></li></ul></li><li><p>属性的类型</p><ul><li><p>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</p></li><li><p>属性特性分两种</p><ul><li><p>数据属性</p><ul><li><p>数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为</p><ul><li>【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</li><li>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true</li><li>【Writable】：表示属性的值是否可以被修改，其默认值为true</li><li>【Value】：包含属性的实际值，其默认值为undefined</li></ul></li><li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:”zhangsan”</p></li><li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数</p></li></ul></li><li><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot;&gt;   &lt;title&gt;Title&lt;/title&gt;   &lt;script&gt;   let person = &#123;&#125;;   Object.defineProperty(person,&quot;name&quot;,&#123;   writable:false,   value:&quot;王麻子&quot;   &#125;);   console.log(person.name);   person.name = &quot;张金条&quot;;   console.log(person.name);   &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot;&gt;   &lt;title&gt;Title&lt;/title&gt;   &lt;script&gt;   let person = &#123;&#125;;   Object.defineProperty(person,&quot;name&quot;,&#123;   // configurable:true,   configurable:false,   value:&quot;王麻子&quot;   &#125;);   console.log(person.name);   delete person.name;   console.log(person.name);   &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre></li><li><p>访问器属性</p><ul><li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。</p></li><li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值</p></li><li><p>访问器属性也有4个特性用了描述它们的行为</p><ul><li>【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性</li><li>【Enumerable】，默认值为true，能否通过for-in循环返回属性</li><li>【get】读取这个属性时调用的函数 getter函数</li><li>【set】在为这个属性赋值时调用的函数 setter函数</li></ul></li></ul></li><li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p><pre><code class="html">         &lt;html lang=&quot;en&quot;&gt;             &lt;head&gt;             &lt;meta charset=&quot;UTF-8&quot;&gt;             &lt;title&gt;Title&lt;/title&gt;              &lt;script&gt;                      let book = &#123;                      name:&quot;七侠五义&quot;,                      price:1                      &#125;;                      book.name = &quot;斗破苍穹&quot;;                      console.log(book.name);                      Object.defineProperty(book,&quot;name&quot;,&#123;                      get()&#123;                      return this.name;                 &#125;,                 set(newValue)&#123;                     this.name = newValue;                     &#125;                 &#125;);             &lt;/script&gt;             &lt;/head&gt;             &lt;body&gt;             &lt;/body&gt;             &lt;/html&gt;</code></pre></li></ul></li></ul></li></ul><ul><li><p>对象合并</p><ul><li> 在开发JavaScript时我们会把多个对象合并使用</li><li> 具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能</li><li>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象<pre><code class="html">    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script&gt;        //目标对象        Obj1 = &#123;name:&quot;老八&quot;&#125;;        //源对象        Obj2 = &#123;name:&quot;老八&quot;&#125;;        //把2复制到目标对象中        result = Object.assign(Obj1,Obj2);        console.log(Obj1 === result)        console.log(Obj2 === result)        console.log(result)    &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;/body&gt;    &lt;/html&gt;</code></pre></li></ul></li><li><p>增强的对象语法</p><ul><li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度</p></li><li><p>属性值得简写</p><ul><li>在给对象添加值时我们可以引用变量<pre><code class="html">      &lt;script&gt;          let username= &quot;sanlvzi&quot;;          let person = &#123;          username:username          &#125;;          console.log(person)      &lt;/script&gt;</code></pre></li><li>还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）<pre><code class="html">  &lt;script&gt;  let username= &quot;sanlvzi&quot;;  username  &#125;;  let person = &#123;  console.log(person)  &lt;/script&gt;</code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot笔记(一）</title>
      <link href="/2022/07/07/SpringBoot%E7%AC%94%E8%AE%B0(%E4%B8%80%EF%BC%89/"/>
      <url>/2022/07/07/SpringBoot%E7%AC%94%E8%AE%B0(%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot笔记(一）</p><span id="more"></span><p>处理静态资源</p><hr><p>在springboot中，可以使用以下方式处理静态资源：</p><ul><li>webjars：localhost:8080/webjars/…<br>百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。</li><li>public，static，/**，resource：localhost:8080/<br>其中优先级：resource&gt;static(默认)&gt;public。</li></ul><p>首页订制</p><hr><ul><li>我们一般通过controller跳转到index首页，将index.html放入templates包中，<br>需导入模板引擎thymeleaf依赖。</li></ul><p>模板引擎thymeleaf</p><hr><ul><li>我们要使用thymeleaf，需要在html文件中导入命名空间的<br>约束<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>，方便提示。</li></ul><p>thymeleaf在html标签中输入th无提示的问题解决</p><hr><ul><li>听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，<br>但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本<br>的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，<br>在pom.xml文件的 properties 标签中添加以下代码：<br>`<properties><pre><code>   &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;/thymeleaf.version&gt;   &lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;</code></pre></properties>`<br><a href="https://blog.csdn.net/qq_43446147/article/details/108000547">原文连接</a></li></ul><p>前端页面模板下载</p><ul><li><a href="https://www.php.cn/">连接</a> “首页-&gt;资源下载”</li></ul><p>首页配置</p><ul><li>所有页面的静态资源都需要使用thymeleaf接管,@{}.</li></ul><p>页面国际化</p><ul><li>(国际化:internationalization) i与n之间有18个字母,故称i18n,<br>在resource下创建i18n文件夹.</li><li>三个文件:默认/英文/中文 可以一个页面实现多个语言编码</li><li>在application.properties中添加<code>spring.messages.basename=i18n.文件名</code></li><li>国际化页面前端页面用#{}取值.</li><li>切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.</li><li>步骤: <ul><li>我们需要配置i18n文件</li><li>我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver</li><li>记得将自己写的组件配置到spring容器@Bean</li></ul></li></ul><p>登录＋拦截器</p><ul><li>拦截未登录直接通过地址访问管理员页面</li></ul><p>定义Data的输入格式</p><ul><li>如果不做如何处理,日期格式输入格式为<code>    Wed Apr 27 22:58:12 CST 2022</code></li><li>我们可以使用dates.format来定义日期的输出格式，如<br>  <code>#dates.format(emp.getBirth(),&#39;yyyy-mm-dd&#39;)</code><br>  yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒</li><li>也可在application.properties中加入<code>spring.jackson.date-format=yyyy-mm-dd</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建博客</title>
      <link href="/2022/07/05/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/07/05/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github搭建博客</p><span id="more"></span><p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo和Jekyll的区别"><a href="#Hexo和Jekyll的区别" class="headerlink" title="Hexo和Jekyll的区别"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p><p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p><p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p><p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p><img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" width = "850" height = "400" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p><p>测试安装是否成功：</p><p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p><p>输入：(显示版本行)</p><pre><code>node -v </code></pre><pre><code>npm -v</code></pre><p>显示结果：</p><img src="https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg" width = "850" height = "400" div align=right /><p>即安装成功；</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><p><b>从一般开发者的角度来看，git有以下功能：</b><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p><p>打开官网下载链接：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (选择windows版本即可)</p><img src="https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg" width = "850" height = "400" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p><img src="https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg" width = "850" height = "400" div align=right /><p>测试是否安装成功：</p><p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p><pre><code>git</code></pre><p>显示结果:</p><img src="https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg" width = "850" height = "400" div align=right /><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）"><a href="#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）" class="headerlink" title="在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><pre><code>ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;</code></pre><p>然后按四次【enter】即可，生成后如下图：</p><img src="https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg" width = "850" height = "400" div align=right /><h3 id="打开Github-点击头像–-gt-【setting】"><a href="#打开Github-点击头像–-gt-【setting】" class="headerlink" title="打开Github,点击头像–&gt;【setting】"></a>打开Github,点击头像–&gt;【setting】</h3><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width = "850" height = "400" div align=right /><h3 id="点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】"><a href="#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】" class="headerlink" title="点击【SSH and GPG keys】–&gt;【New SSH key】"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><img src="https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg" width = "850" height = "400" div align=right /><h3 id="输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；"><a href="#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；" class="headerlink" title="输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:/用户/用户名/.ssh/id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><img src="https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg" width = "850" height = "300" div align=right /><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p><pre><code class="language">npm install hexo-cli -g</code></pre><img src="https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg" width = "850" height = "300" div align=right /><p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p><pre><code class="language">hexo init 你的博客名</code></pre><h3 id="在博客目录中安装依赖"><a href="#在博客目录中安装依赖" class="headerlink" title="在博客目录中安装依赖"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p><pre><code>cd 博客名</code></pre><pre><code class="language">npm install</code></pre><p>安装完成之后进行测试，窗口中输入：</p><pre><code class="language">hexo s -p 5555</code></pre><p>在浏览器上输入 localhost:5555</p><img src="https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg" width = "850" height = "300" div align=right /><h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p><img src="https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg" width = "850" height = "300" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p><p>打开Sublime 直接将博客目录拖进Sublime即可；</p><img src="https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg" width = "850" height = "400" div align=right /><h3 id="hexo发布到Github"><a href="#hexo发布到Github" class="headerlink" title="hexo发布到Github"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）</p><img src="https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg" width = "850" height = "200" div align=right /><p>打开Github网页点击【Your repositories】 最后复制链接</p><img src="https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg" width = "850" height = "450" div align=right /><img src="https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg" width = "850" height = "300" div align=right /><img src="https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg" width = "850" height = "350" div align=right /><p>在_config.yml文件最后一行添加repo</p><pre><code class="language">repo: </code></pre><p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p><p>在最后一行添加</p><pre><code class="language">branch: main</code></pre><p>type后添加git</p><pre><code class="language">type: git</code></pre><p>如下图</p><p><img src="https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png" alt="屏幕截图 2022-07-05 210636.png"><br>在博客根目录下添加插件：</p><pre><code class="language">npm install hexo-deployer-git --save</code></pre><h3 id="获取个人访问令牌"><a href="#获取个人访问令牌" class="headerlink" title="获取个人访问令牌"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p><p>在个人设置页面，找到 Settings<br><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width = "850" height = "400" div align=right /><br>找到 Developer settings<br><img src="https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg" width = "850" height = "350" div align=right /><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src="https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg" width = "850" height = "350" div align=right /><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src="https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg" width = "850" height = "350" div align=right /><br>如下为生成的令牌<br><img src="https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg" width = "850" height = "350" div align=right /></p><p><font color=RED>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font></p><p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p><p>添加到如下图位置：（使用“@”和后面内容隔开）</p><img src="https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg" width = "850" height = "200" div align=right /><h3 id="git中设置你的用户名和邮件名"><a href="#git中设置你的用户名和邮件名" class="headerlink" title="git中设置你的用户名和邮件名"></a>git中设置你的用户名和邮件名</h3><p> 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p><pre><code class="language">git config --global user.name &quot;Your Name&quot;</code></pre><pre><code>git config --global user.email &quot;you@example.com&quot;</code></pre><h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><pre><code>hexo g</code></pre><pre><code>hexo d</code></pre><p>打开你的浏览器：</p><pre><code class="language">https://博客名.github.io</code></pre><p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p><h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>hexo主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg" width = "850" height = "400" div align=right /></p><p>找到你喜欢的主题，例如next主题 点击【next】<br><img src="https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg" width = "850" height = "400" div align=right /></p><p>按照文件中所说下载和修改即可<br><img src="https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg" width = "850" height = "400" div align=right /></p><p>在博客根目录中打开【Git Bash Here】</p><pre><code class="language">npm install hexo-themes-next</code></pre><p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p><pre><code class="language">theme: next</code></pre><h3 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown过长导致页面无法显示问题</title>
      <link href="/2022/07/05/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/05/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Markdown过长导致页面无法显示问题</p><span id="more"></span><h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p><pre><code># Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:  enable: false  length: 150</code></pre><p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p><p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p><p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p><h2 id="其他的文章配置"><a href="#其他的文章配置" class="headerlink" title="其他的文章配置"></a>其他的文章配置</h2><pre><code># ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.# 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。scroll_to_more: false# Automatically saving scroll position on each post/page in cookies.# 自动保存每篇文章或页面上一次滚动的地方。save_scroll: false# Automatically excerpt description in homepage as preamble text.# 自动在首页对文章进行摘要描述作为前言文本。excerpt_description: true# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.# 不推荐使用自动摘要。# 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。auto_excerpt:  enable: true  length: 200# Post meta display settings# 文章元数据展示设置post_meta:  # 文本显示  item_text: true  # 创建时间  created_at: true  # 更新时间  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用  updated_at: false  # 目录分类  categories: true# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcount# 文章字数展示设置post_wordcount:  # 文本显示  item_text: true  # 文章字数统计  wordcount: true  # 阅读时长  min2read: true  # 站点总字数统计  totalcount: true  # 该post_wordcount的所有设置另起一行显示  separated_meta: true</code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Jpa</title>
      <link href="/2022/07/05/SpringBoot%E6%95%B4%E5%90%88Jpa/"/>
      <url>/2022/07/05/SpringBoot%E6%95%B4%E5%90%88Jpa/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot整合Jpa</p><span id="more"></span><p>1.添加依赖</p><pre><code class="SQL">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><p>2.配置数据源</p><pre><code class="yaml">spring:  datasource:    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai    username: root    password: root    driver-class-name: com.mysql.cj.jdbc.Driver  jpa:    #打印SQL语句    show-sql: true    #使用测试用例时需要配置该项    properties:      hibernate:        enable_lazy_load_no_trans: true</code></pre><p>3.新建实体类，并建立映射关系</p><pre><code class="java">@Table(name = &quot;student&quot;)@Entity@Datapublic class Student &#123;    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Integer studentId;    @Column(name = &quot;student_name&quot;)    private String studentName;    @Column(name = &quot;student_gender&quot;)    private String studentGender;    @Column(name = &quot;student_age&quot;)    private String studentAge;&#125;</code></pre><p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p><p>@Entity：JPA要求实体类上需要标注该注解</p><p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p><p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p><p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p><h3 id="JpaRepository接口详解"><a href="#JpaRepository接口详解" class="headerlink" title="JpaRepository接口详解"></a>JpaRepository接口详解</h3><pre><code class="sql">public interface JpaRepository&lt;T, ID&gt; extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;    //查询所有的数据    List&lt;T&gt; findAll();    //查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定    List&lt;T&gt; findAll(Sort sort);    //根据ID批量查询    List&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids);    //批量保存    &lt;S extends T&gt; List&lt;S&gt; saveAll(Iterable&lt;S&gt; entities);    //刷新缓存    void flush();    //保存并刷新缓存    &lt;S extends T&gt; S saveAndFlush(S entity);    //批量保存并刷新缓存    &lt;S extends T&gt; List&lt;S&gt; saveAllAndFlush(Iterable&lt;S&gt; entities);    //批量删除    void deleteAllInBatch(Iterable&lt;T&gt; entities);    //通过ID批量删除    void deleteAllByIdInBatch(Iterable&lt;ID&gt; ids);    //等价于删除全部数据    void deleteAllInBatch();    //通过ID查询    T getById(ID id);    //通过示例批量查询    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example);    //通过示例批量查询    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json教程</title>
      <link href="/2022/07/04/Json%E6%95%99%E7%A8%8B/"/>
      <url>/2022/07/04/Json%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Json教程</p><span id="more"></span><h2 id="Json教程"><a href="#Json教程" class="headerlink" title="Json教程"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p><p>JSON 是存储和交换文本信息的语法，类似 XML。</p><p>JSON 比 XML 更小、更快，更易解析。</p><p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p><pre><code class="json">&#123;    &quot;sites&quot;: [    &#123; &quot;name&quot;:&quot;百度&quot; , &quot;url&quot;:&quot;www.baidu.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;    ]&#125;</code></pre><h3 id="Json语法规则"><a href="#Json语法规则" class="headerlink" title="Json语法规则"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>大括号 <strong>{}</strong> 保存对象</li><li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li></ul><h3 id="JSON-名称-值对"><a href="#JSON-名称-值对" class="headerlink" title="JSON 名称/值对"></a>JSON 名称/值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p><h3 id="JSON-值数据类型"><a href="#JSON-值数据类型" class="headerlink" title="JSON 值数据类型"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p><ul><li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li><li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li><li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li><li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li><li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li><li>对象可以包含多个 <strong>key/value（键/值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。</li><li>null：例如，“name”:null</li></ul><h3 id="JSON访问"><a href="#JSON访问" class="headerlink" title="JSON访问"></a>JSON访问</h3><h4 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h4><pre><code class="javascript">let str = &#39;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#39;//将JSON格式的字符串转换成JSON对象let obj = JSON.parse(str)console.log(obj.name)console.log(obj.age)</code></pre><h4 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h4><pre><code class="javascript">let ary = &#39;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#39;let obj = JSON.parse(ary);        console.log(obj[0]);console.log(obj[1]);</code></pre><h4 id="复杂情形"><a href="#复杂情形" class="headerlink" title="复杂情形"></a>复杂情形</h4><pre><code class="javascript">let str = &#39;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#39;let obj = JSON.parse(str);        let ary = obj.students;for(let i = 0;i&lt;ary.length;i++)&#123;    console.log(ary[i].name+&quot;============&quot;+ary[i].age);&#125;</code></pre><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p><p>在接收服务器数据时一般是字符串。</p><p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>]]></content>
      
      
      <categories>
          
          <category> 知识组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/02/hello-world/"/>
      <url>/2022/07/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎写的 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
