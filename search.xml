<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript对象</title>
      <link href="/2022/07/07/JavaScript%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/07/07/JavaScript%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>JavaScript对象</p><span id="more"></span><ul><li><p>什么是对象</p><ul><li>对象是一种复合值，它汇聚多个值（原始值或者是其它对象），并且允许我们按照名称存储和获取这些值。</li><li>对象是一个属性无序的集合，每个属性都有自己的名字和值，只有在对象中，其使用起来与顺序无关，只需要打点即可调用。</li><li>在JavaScript中对象可以从其它对象继承属性。</li><li>JavaScript对象是动态的，即可以动态的添加和删除对象属性。</li></ul></li><li><p>认识对象</p><ul><li>创建自定义对象我们可以通过创建Object实例来实现，然后再给他添加属性和方法（函数）<pre><code class="html">  &lt;script&gt;    let person = new Object();    person.name = &quot;zhangsan&quot;;    person.age = 18;    person.job = &quot;Teacher&quot;;     console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);    person.work = function()&#123;&#125;    ---    let person = &#123;    name = &quot;zhangsan&quot;,    age = 18,    job = &quot;Teacher&quot;,    work()&#123;    console.log(this.name+&quot;，年龄&quot;+this.age+&quot;岁，他的工作是：&quot;+this.job);    &#125;    &#125;    &lt;/script&gt;</code></pre></li></ul></li><li><p>属性的类型</p><ul><li><p>JavaScript使用了一些内部特性来描述属性的特征，这些特性由JavaScript实现引擎的规范定义的，所以开发者不能直接在JavaScript中访问这些访问。</p></li><li><p>属性特性分两种</p><ul><li><p>数据属性</p><ul><li><p>数据属性包含一个保存数据值得位置，数据的值会从这个位置中读取，当然也可以写入到这个位置，数据属性有4个特性描述他的行为</p><ul><li>【Configurable】：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。其默认情况下为true</li><li>【Enumerable】：表示属性是否可以通过for-in循环返回，默认情况也为true</li><li>【Writable】：表示属性的值是否可以被修改，其默认值为true</li><li>【Value】：包含属性的实际值，其默认值为undefined</li></ul></li><li><p>这些属性特性我们在定义对象时并不需要显式的添加前三个，而Value特性也会被我们定义，如：name:”zhangsan”</p></li><li><p>如果想要修改这些默认特性，就必须使用Object.defineProperty()方法，这个方法在使用时接收三个参数：要给其添加属性的对象，属性的名称，以及一个描述特性的对象及其参数</p></li></ul></li><li><p>示例</p><pre><code class="html">&lt;!DOCTYPE html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot;&gt;   &lt;title&gt;Title&lt;/title&gt;   &lt;script&gt;   let person = &#123;&#125;;   Object.defineProperty(person,&quot;name&quot;,&#123;   writable:false,   value:&quot;王麻子&quot;   &#125;);   console.log(person.name);   person.name = &quot;张金条&quot;;   console.log(person.name);   &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;  &lt;/html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;   &lt;meta charset=&quot;UTF-8&quot;&gt;   &lt;title&gt;Title&lt;/title&gt;   &lt;script&gt;   let person = &#123;&#125;;   Object.defineProperty(person,&quot;name&quot;,&#123;   // configurable:true,   configurable:false,   value:&quot;王麻子&quot;   &#125;);   console.log(person.name);   delete person.name;   console.log(person.name);   &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;/body&gt;  &lt;/html&gt;</code></pre></li><li><p>访问器属性</p><ul><li><p>访问器属性不包含数据值，它包含一个获取（getter）函数以及一个设置 （setter）函数，不过这两个函数并非必须函数。</p></li><li><p>在读取访问器属性时，程序会自个调用获取函数，也就是说获取函数的主 要任务就是返回一个有效的值</p></li><li><p>访问器属性也有4个特性用了描述它们的行为</p><ul><li>【Configurable】，默认值为true，表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性</li><li>【Enumerable】，默认值为true，能否通过for-in循环返回属性</li><li>【get】读取这个属性时调用的函数 getter函数</li><li>【set】在为这个属性赋值时调用的函数 setter函数</li></ul></li></ul></li><li><p>以上这些属性也是不能直接定义的，必须通过Object-defineProperty()</p><pre><code class="html">         &lt;html lang=&quot;en&quot;&gt;             &lt;head&gt;             &lt;meta charset=&quot;UTF-8&quot;&gt;             &lt;title&gt;Title&lt;/title&gt;              &lt;script&gt;                      let book = &#123;                      name:&quot;七侠五义&quot;,                      price:1                      &#125;;                      book.name = &quot;斗破苍穹&quot;;                      console.log(book.name);                      Object.defineProperty(book,&quot;name&quot;,&#123;                      get()&#123;                      return this.name;                 &#125;,                 set(newValue)&#123;                     this.name = newValue;                     &#125;                 &#125;);             &lt;/script&gt;             &lt;/head&gt;             &lt;body&gt;             &lt;/body&gt;             &lt;/html&gt;</code></pre></li></ul></li></ul></li></ul><ul><li><p>对象合并</p><ul><li> 在开发JavaScript时我们会把多个对象合并使用</li><li> 具体来说就是把一个对象的所有属性复制到了目标对象上，这种方式也被称之为混入，通过对象的合并我们可以增强对象功能</li><li>JavaScript专门为合并对象提供了一个Object.assign()方法，这个方法接收一个目标对象和一个或多个其它对象（源对象），然后将每个源对象中自有属性复制到目标对象<pre><code class="html">    &lt;html lang=&quot;en&quot;&gt;    &lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script&gt;        //目标对象        Obj1 = &#123;name:&quot;老八&quot;&#125;;        //源对象        Obj2 = &#123;name:&quot;老八&quot;&#125;;        //把2复制到目标对象中        result = Object.assign(Obj1,Obj2);        console.log(Obj1 === result)        console.log(Obj2 === result)        console.log(result)    &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;/body&gt;    &lt;/html&gt;</code></pre></li></ul></li><li><p>增强的对象语法</p><ul><li><p>ES6位对象定义了很多定义对象及其操作对象的语法特性，这些特性可以极大程度提高对象处理的方便程度</p></li><li><p>属性值得简写</p><ul><li>在给对象添加值时我们可以引用变量<pre><code class="html">      &lt;script&gt;          let username= &quot;sanlvzi&quot;;          let person = &#123;          username:username          &#125;;          console.log(person)      &lt;/script&gt;</code></pre></li><li>还能简写（以下这种情况必须时变量名域对象的属性名相同才可以这么写）<pre><code class="html">  &lt;script&gt;  let username= &quot;sanlvzi&quot;;  username  &#125;;  let person = &#123;  console.log(person)  &lt;/script&gt;</code></pre></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot笔记(一）</title>
      <link href="/2022/07/07/SpringBoot%E7%AC%94%E8%AE%B0(%E4%B8%80%EF%BC%89/"/>
      <url>/2022/07/07/SpringBoot%E7%AC%94%E8%AE%B0(%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot笔记(一）</p><span id="more"></span><p>处理静态资源</p><hr><p>在springboot中，可以使用以下方式处理静态资源：</p><ul><li>webjars：localhost:8080/webjars/…<br>百度输入webjars官网，可以找到很多资源的maven依赖方式，如jQuery，bootstrap等等。</li><li>public，static，/**，resource：localhost:8080/<br>其中优先级：resource&gt;static(默认)&gt;public。</li></ul><p>首页订制</p><hr><ul><li>我们一般通过controller跳转到index首页，将index.html放入templates包中，<br>需导入模板引擎thymeleaf依赖。</li></ul><p>模板引擎thymeleaf</p><hr><ul><li>我们要使用thymeleaf，需要在html文件中导入命名空间的<br>约束<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>，方便提示。</li></ul><p>thymeleaf在html标签中输入th无提示的问题解决</p><hr><ul><li>听说IDEA默认的thymeleaf版本是2.X版本，2.X版本有不少的功能缺陷，<br>但是据说现在IDEA提高了默认的thymeleaf版本，导入前文的依赖后3.X版本<br>的会一同下载下来，并没有去考证，死马当做活马医，手动升级了版本，<br>在pom.xml文件的 properties 标签中添加以下代码：<br>`<properties><pre><code>   &lt;thymeleaf.version&gt;3.0.11.RELEASE&lt;/thymeleaf.version&gt;   &lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;</code></pre></properties>`<br><a href="https://blog.csdn.net/qq_43446147/article/details/108000547">原文连接</a></li></ul><p>前端页面模板下载</p><ul><li><a href="https://www.php.cn/">连接</a> “首页-&gt;资源下载”</li></ul><p>首页配置</p><ul><li>所有页面的静态资源都需要使用thymeleaf接管,@{}.</li></ul><p>页面国际化</p><ul><li>(国际化:internationalization) i与n之间有18个字母,故称i18n,<br>在resource下创建i18n文件夹.</li><li>三个文件:默认/英文/中文 可以一个页面实现多个语言编码</li><li>在application.properties中添加<code>spring.messages.basename=i18n.文件名</code></li><li>国际化页面前端页面用#{}取值.</li><li>切换中文/English config中创建类实现接口LocaleResolver,配置解析请求.</li><li>步骤: <ul><li>我们需要配置i18n文件</li><li>我们如果需要在项目中进行按钮自动切换,我们需要自定义一个组件LocaleResolver</li><li>记得将自己写的组件配置到spring容器@Bean</li></ul></li></ul><p>登录＋拦截器</p><ul><li>拦截未登录直接通过地址访问管理员页面</li></ul><p>定义Data的输入格式</p><ul><li>如果不做如何处理,日期格式输入格式为<code>    Wed Apr 27 22:58:12 CST 2022</code></li><li>我们可以使用dates.format来定义日期的输出格式，如<br>  <code>#dates.format(emp.getBirth(),&#39;yyyy-mm-dd&#39;)</code><br>  yyyy-mm-dd hh-mm-ss表示年-月-日 时-分-秒</li><li>也可在application.properties中加入<code>spring.jackson.date-format=yyyy-mm-dd</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建博客</title>
      <link href="/2022/07/05/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/07/05/Hexo-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github搭建博客</p><span id="more"></span><p>搭建博客千千万，最后受欢迎的9还是Hexo和Jekyll,用户用的非常多的两个静态博客生成系统。本文就介绍利用Hexo结合github page来搭建个人博客。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h3><p>Hexo 是一个基于 node.js 制作的快速、简洁且高效的博客框架。Hexo 可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo和Jekyll的区别"><a href="#Hexo和Jekyll的区别" class="headerlink" title="Hexo和Jekyll的区别"></a>Hexo和Jekyll的区别</h3><p>·本地环境<br>Jeklly 是由 Ruby 语言编写，需要到官网下载并安装 RubyInstaller。Hexo 则需要安装 Node.js 环境。网上经常看到很多人吐槽安装 Jekyll 经常碰到各种问题。</p><p>·速度<br>说是比较 Hexo 和 Jeklly 这两个框架，其实要比较 Ruby 和 Node.js 的运行速度。Node.js 是一个 Javascrip t运行环境(Runtime)。实际上它是对 Google V8 引擎进行了封装。众所周知，Google JS Runtime 速度非常快，性能非常好。在本地预览上，Jekyll 是生成了页面然后进行预览，而 Hexo 是没有在根目录生成文件的，速度也快不少。因此，Hexo 在性能和速度上面更胜一筹。</p><p>·部署<br>Jeklly 是将整个工程源码上传到 Github 仓库，然后 Github 会自动生成静态文件。而 Hexo 需要事先在本地生成整个站点页面，再将 Html 文件、资源文件等上传到 Github 上。</p><p>·主题<br>Jekyll 使用 Liquid；它是有 Ruby 语言编写的开源模板语言。Hexo 使用的是 EJS；EJS 是 JavaScript 模板库，用来从 JSON 数据中生成 HTML 字符串。EJS 相对比较复杂，所以可实现的功能更加的多。从开发一个主题难度上看，Hexo 实现起来更方便、更简单些。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>1、本机系统：Windows 10（64位）<br>2、Node.js：v6.9.2LTS（64位）</p><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>打开官网下载链接Node.js:<a href="https://nodejs.org/en/">https://nodejs.org/en/</a> (选择长期服务，版本更稳定)</p><img src="https://i.loli.net/2021/10/19/PWDijRHqgzxFbyn.jpg" width = "850" height = "400" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p><p>测试安装是否成功：</p><p>按【win+R】键，输入cmd，再按回车弹出命令窗口</p><p>输入：(显示版本行)</p><pre><code>node -v </code></pre><pre><code>npm -v</code></pre><p>显示结果：</p><img src="https://i.loli.net/2021/10/19/fDzgWhEbnkxPevL.jpg" width = "850" height = "400" div align=right /><p>即安装成功；</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><p><b>从一般开发者的角度来看，git有以下功能：</b><br>1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。<br>2、在自己的机器上根据不同的开发目的，创建分支，修改代码。<br>3、在单机上自己创建的分支上提交代码。<br>4、在单机上合并分支。<br>5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。<br>6、生成补丁（patch），把补丁发送给主开发者。</p><p>打开官网下载链接：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> (选择windows版本即可)</p><img src="https://i.loli.net/2021/10/19/7UgXJ4y3MV6Bpri.jpg" width = "850" height = "400" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（出下图外选项，默认所有选项），然后改变安装路径即可。</p><img src="https://i.loli.net/2021/10/19/oT9CgyscVXWPnbF.jpg" width = "850" height = "400" div align=right /><p>测试是否安装成功：</p><p>按【win+R】键，输入cmd，再按回车弹出命令窗口，再输入：</p><pre><code>git</code></pre><p>显示结果:</p><img src="https://i.loli.net/2021/10/19/y5LnHxaYiID93Cs.jpg" width = "850" height = "400" div align=right /><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）"><a href="#在Git安装目录中点击【git-bash-exe】-输入命令：（输入时引号不要删）" class="headerlink" title="在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）"></a>在Git安装目录中点击【git-bash.exe】,输入命令：（输入时引号不要删）</h3><pre><code>ssh-keygen -t rsa -C &quot;Github注册的邮箱&quot;</code></pre><p>然后按四次【enter】即可，生成后如下图：</p><img src="https://i.loli.net/2021/10/19/6S8LwDAmHTMvqJz.jpg" width = "850" height = "400" div align=right /><h3 id="打开Github-点击头像–-gt-【setting】"><a href="#打开Github-点击头像–-gt-【setting】" class="headerlink" title="打开Github,点击头像–&gt;【setting】"></a>打开Github,点击头像–&gt;【setting】</h3><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width = "850" height = "400" div align=right /><h3 id="点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】"><a href="#点击【SSH-and-GPG-keys】–-gt-【New-SSH-key】" class="headerlink" title="点击【SSH and GPG keys】–&gt;【New SSH key】"></a>点击【SSH and GPG keys】–&gt;【New SSH key】</h3><img src="https://i.loli.net/2021/10/19/JNnuwh4dAMHFILT.jpg" width = "850" height = "400" div align=right /><h3 id="输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；"><a href="#输入title（可以随便输），但Key你需要用记事本或Notepad-打开磁盘中c-用户-用户名-ssh-id-rsa-pub然后复制粘贴里面的内容到key中，最后点击【ADD-SSH-key】；" class="headerlink" title="输入title（可以随便输），但Key你需要用记事本或Notepad++打开磁盘中c:/用户/用户名/.ssh/id_rsa.pub然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；"></a>输入title（可以随便输），但Key你需要用记事本或Notepad++打开<b>磁盘中c:/用户/用户名/.ssh/id_rsa.pub</b>然后复制粘贴里面的内容到key中，最后点击【ADD SSH key】；</h3><img src="https://i.loli.net/2021/10/19/uglR7p4jMUSbfxe.jpg" width = "850" height = "300" div align=right /><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在想要搭建博客的目录下创建文件夹名为blog，按【win+R】键，输入cmd，再按回车弹出命令窗口，cd到创建的文件夹下，输入：</p><pre><code class="language">npm install hexo-cli -g</code></pre><img src="https://i.loli.net/2021/10/19/pwBHNlgo2cdZiA4.jpg" width = "850" height = "300" div align=right /><p>不要关闭刚才的命令窗口，在刚才的窗口中初始化hexo，输入：</p><pre><code class="language">hexo init 你的博客名</code></pre><h3 id="在博客目录中安装依赖"><a href="#在博客目录中安装依赖" class="headerlink" title="在博客目录中安装依赖"></a>在博客目录中安装依赖</h3><p>在刚才的窗口中</p><pre><code>cd 博客名</code></pre><pre><code class="language">npm install</code></pre><p>安装完成之后进行测试，窗口中输入：</p><pre><code class="language">hexo s -p 5555</code></pre><p>在浏览器上输入 localhost:5555</p><img src="https://i.loli.net/2021/10/19/KFMBiULjA1yY8st.jpg" width = "850" height = "300" div align=right /><h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><p>打开官网下载链接：<a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a> （点击DPWNLOAD FOR WINDOWS）</p><img src="https://i.loli.net/2021/10/19/kAnXiPatsr2zxDc.jpg" width = "850" height = "300" div align=right /><p>下载完成之后直接双击安装包，只需点击下一步（默认所有选项），然后改变安装路径即可。</p><p>打开Sublime 直接将博客目录拖进Sublime即可；</p><img src="https://i.loli.net/2021/10/19/RMkyeoixVCAt81f.jpg" width = "850" height = "400" div align=right /><h3 id="hexo发布到Github"><a href="#hexo发布到Github" class="headerlink" title="hexo发布到Github"></a>hexo发布到Github</h3><p>使用Sublime打开博客根目录中_config.yml 修改第16行的url 改为自己的网址（如 https://自己的博客名.github.io ）</p><img src="https://i.loli.net/2021/10/20/QHMrJse8xOnjWl5.jpg" width = "850" height = "200" div align=right /><p>打开Github网页点击【Your repositories】 最后复制链接</p><img src="https://i.loli.net/2021/10/20/u1w8kDULWQBvGzs.jpg" width = "850" height = "450" div align=right /><img src="https://i.loli.net/2021/10/20/6cGuVNTXKWFSZsw.jpg" width = "850" height = "300" div align=right /><img src="https://s2.loli.net/2022/07/05/YuC4zwxFHcrPOgt.jpg" width = "850" height = "350" div align=right /><p>在_config.yml文件最后一行添加repo</p><pre><code class="language">repo: </code></pre><p>将你复制的链接添加到repo之后，用引号隔开（切记引号后面必须要有空格）</p><p>在最后一行添加</p><pre><code class="language">branch: main</code></pre><p>type后添加git</p><pre><code class="language">type: git</code></pre><p>如下图</p><p><img src="https://s2.loli.net/2022/07/05/qN5nxLk7d4EfYXF.png" alt="屏幕截图 2022-07-05 210636.png"><br>在博客根目录下添加插件：</p><pre><code class="language">npm install hexo-deployer-git --save</code></pre><h3 id="获取个人访问令牌"><a href="#获取个人访问令牌" class="headerlink" title="获取个人访问令牌"></a>获取个人访问令牌</h3><p>对密码身份验证的支持已于 2021 年 8 月 13 日移除。现在改用个人访问令牌。简单点说就是需要把你的密码换成 token。</p><p>在个人设置页面，找到 Settings<br><img src="https://i.loli.net/2021/10/19/15flbemyaNIu4MU.jpg" width = "850" height = "400" div align=right /><br>找到 Developer settings<br><img src="https://i.loli.net/2021/10/21/VkyOgL5Z1746mzT.jpg" width = "850" height = "350" div align=right /><br>选择个人访问令牌 Personal access tokens，然后点击生成令牌 Generate new token<br><img src="https://i.loli.net/2021/10/21/KsVtaRpmhUSLorF.jpg" width = "850" height = "350" div align=right /><br>设置 token 的有效期，访问权限等，生成令牌 Generate token<br><img src="https://i.loli.net/2021/10/21/6Kdwmi7Qr2MWUJf.jpg" width = "850" height = "350" div align=right /><br>如下为生成的令牌<br><img src="https://i.loli.net/2021/10/21/LMsRWZaq8oSUwnh.jpg" width = "850" height = "350" div align=right /></p><p><font color=RED>注意<br>记得把 token 保存下来，当你再次刷新网页的时候，就没办法看见了</font></p><p>最后，把 token 直接添加远程仓库链接中，这样就可以避免同一个仓库每次提交代码都要输入 token 了。</p><p>添加到如下图位置：（使用“@”和后面内容隔开）</p><img src="https://i.loli.net/2021/10/21/WCX7dgp9UNFxJ1B.jpg" width = "850" height = "200" div align=right /><h3 id="git中设置你的用户名和邮件名"><a href="#git中设置你的用户名和邮件名" class="headerlink" title="git中设置你的用户名和邮件名"></a>git中设置你的用户名和邮件名</h3><p> 这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中。</p><pre><code class="language">git config --global user.name &quot;Your Name&quot;</code></pre><pre><code>git config --global user.email &quot;you@example.com&quot;</code></pre><h3 id="生成提交"><a href="#生成提交" class="headerlink" title="生成提交"></a>生成提交</h3><pre><code>hexo g</code></pre><pre><code>hexo d</code></pre><p>打开你的浏览器：</p><pre><code class="language">https://博客名.github.io</code></pre><p>恭喜您，您的博客现在已制作完成，现在只需要添加你喜欢的主题既可以开始你的博客之旅了。</p><h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>hexo主题网站：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><img src="https://i.loli.net/2021/10/21/AhUeqK8sB53jp4k.jpg" width = "850" height = "400" div align=right /></p><p>找到你喜欢的主题，例如next主题 点击【next】<br><img src="https://i.loli.net/2021/10/21/ciqEGsyQ3l9Oorp.jpg" width = "850" height = "400" div align=right /></p><p>按照文件中所说下载和修改即可<br><img src="https://i.loli.net/2021/10/21/b16RkjZFNDQAEic.jpg" width = "850" height = "400" div align=right /></p><p>在博客根目录中打开【Git Bash Here】</p><pre><code class="language">npm install hexo-themes-next</code></pre><p>安装完成后，打开 Hexo 配置文件(_config.yml)并将theme变量设置为next.</p><pre><code class="language">theme: next</code></pre><h3 id="现在来介绍常用的Hexo-命令"><a href="#现在来介绍常用的Hexo-命令" class="headerlink" title="现在来介绍常用的Hexo 命令"></a>现在来介绍常用的Hexo 命令</h3><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p>]]></content>
      
      
      <categories>
          
          <category> 兴趣组 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown过长导致页面无法显示问题</title>
      <link href="/2022/07/05/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/05/Markdown%E8%BF%87%E9%95%BF%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Markdown过长导致页面无法显示问题</p><span id="more"></span><h2 id="文章摘要设置"><a href="#文章摘要设置" class="headerlink" title="文章摘要设置"></a>文章摘要设置</h2><p>打开主题配置文件 _config.yml 文件，找到如下：</p><pre><code># Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:  enable: false  length: 150</code></pre><p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p><p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p><p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p><h2 id="其他的文章配置"><a href="#其他的文章配置" class="headerlink" title="其他的文章配置"></a>其他的文章配置</h2><pre><code># ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.# 自动将页面滚动到&lt;!-- more --&gt;标记下的地方。scroll_to_more: false# Automatically saving scroll position on each post/page in cookies.# 自动保存每篇文章或页面上一次滚动的地方。save_scroll: false# Automatically excerpt description in homepage as preamble text.# 自动在首页对文章进行摘要描述作为前言文本。excerpt_description: true# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.# 不推荐使用自动摘要。# 请在文章中使用&lt;!-- more --&gt;标志来精确控制摘要长度。auto_excerpt:  enable: true  length: 200# Post meta display settings# 文章元数据展示设置post_meta:  # 文本显示  item_text: true  # 创建时间  created_at: true  # 更新时间  # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用  updated_at: false  # 目录分类  categories: true# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcount# 文章字数展示设置post_wordcount:  # 文本显示  item_text: true  # 文章字数统计  wordcount: true  # 阅读时长  min2read: true  # 站点总字数统计  totalcount: true  # 该post_wordcount的所有设置另起一行显示  separated_meta: true</code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎写的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Jpa</title>
      <link href="/2022/07/05/SpringBoot%E6%95%B4%E5%90%88Jpa/"/>
      <url>/2022/07/05/SpringBoot%E6%95%B4%E5%90%88Jpa/</url>
      
        <content type="html"><![CDATA[<p>SpringBoot整合Jpa</p><span id="more"></span><p>1.添加依赖</p><pre><code class="SQL">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><p>2.配置数据源</p><pre><code class="yaml">spring:  datasource:    url: jdbc:mysql://localhost:3306/student?serverTimezone=Asia/Shanghai    username: root    password: root    driver-class-name: com.mysql.cj.jdbc.Driver  jpa:    #打印SQL语句    show-sql: true    #使用测试用例时需要配置该项    properties:      hibernate:        enable_lazy_load_no_trans: true</code></pre><p>3.新建实体类，并建立映射关系</p><pre><code class="java">@Table(name = &quot;student&quot;)@Entity@Datapublic class Student &#123;    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Integer studentId;    @Column(name = &quot;student_name&quot;)    private String studentName;    @Column(name = &quot;student_gender&quot;)    private String studentGender;    @Column(name = &quot;student_age&quot;)    private String studentAge;&#125;</code></pre><p>@Table：用于表明该实体类对应的是数据库中的哪张表，name属性用于配置表名。</p><p>@Entity：JPA要求实体类上需要标注该注解</p><p>@Id：在标注了@Entity的类上必须有一个字段标注该注解，该注解用于表明标注了此注解的字段是主键。</p><p>@GeneratedValue：用于表明该主键的生成策略，通常和@Id同时出现</p><p>@Column：该注解并不是必须的，通常用于表明该变量对应的数据库表字段，如果字段名称使用经典命名法，而变量名称使用了驼峰命名法，则此注解可以省略</p><h3 id="JpaRepository接口详解"><a href="#JpaRepository接口详解" class="headerlink" title="JpaRepository接口详解"></a>JpaRepository接口详解</h3><pre><code class="sql">public interface JpaRepository&lt;T, ID&gt; extends PagingAndSortingRepository&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;    //查询所有的数据    List&lt;T&gt; findAll();    //查询所有的数据，并排序，排序的字段及排序方式通过Sort对象指定    List&lt;T&gt; findAll(Sort sort);    //根据ID批量查询    List&lt;T&gt; findAllById(Iterable&lt;ID&gt; ids);    //批量保存    &lt;S extends T&gt; List&lt;S&gt; saveAll(Iterable&lt;S&gt; entities);    //刷新缓存    void flush();    //保存并刷新缓存    &lt;S extends T&gt; S saveAndFlush(S entity);    //批量保存并刷新缓存    &lt;S extends T&gt; List&lt;S&gt; saveAllAndFlush(Iterable&lt;S&gt; entities);    //批量删除    void deleteAllInBatch(Iterable&lt;T&gt; entities);    //通过ID批量删除    void deleteAllByIdInBatch(Iterable&lt;ID&gt; ids);    //等价于删除全部数据    void deleteAllInBatch();    //通过ID查询    T getById(ID id);    //通过示例批量查询    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example);    //通过示例批量查询    &lt;S extends T&gt; List&lt;S&gt; findAll(Example&lt;S&gt; example, Sort sort);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json教程</title>
      <link href="/2022/07/04/Json%E6%95%99%E7%A8%8B/"/>
      <url>/2022/07/04/Json%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Json教程</p><span id="more"></span><h2 id="Json教程"><a href="#Json教程" class="headerlink" title="Json教程"></a>Json教程</h2><p>JSON: <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation(JavaScript 对象表示法)</p><p>JSON 是存储和交换文本信息的语法，类似 XML。</p><p>JSON 比 XML 更小、更快，更易解析。</p><p>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</p><pre><code class="json">&#123;    &quot;sites&quot;: [    &#123; &quot;name&quot;:&quot;百度&quot; , &quot;url&quot;:&quot;www.baidu.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;google&quot; , &quot;url&quot;:&quot;www.google.com&quot; &#125;,     &#123; &quot;name&quot;:&quot;微博&quot; , &quot;url&quot;:&quot;www.weibo.com&quot; &#125;    ]&#125;</code></pre><h3 id="Json语法规则"><a href="#Json语法规则" class="headerlink" title="Json语法规则"></a>Json语法规则</h3><p>JSON 语法是 JavaScript 对象表示语法的子集。</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔</li><li>大括号 <strong>{}</strong> 保存对象</li><li>中括号 <strong>[]</strong> 保存数组，数组可以包含多个对象</li></ul><h3 id="JSON-名称-值对"><a href="#JSON-名称-值对" class="headerlink" title="JSON 名称/值对"></a>JSON 名称/值对</h3><p>JSON 数据的书写格式是：”key”:”value”</p><h3 id="JSON-值数据类型"><a href="#JSON-值数据类型" class="headerlink" title="JSON 值数据类型"></a>JSON 值数据类型</h3><p>JSON 值可以是：</p><ul><li>数字（整数或浮点数）:JSON 数字可以是整型或者浮点型，例如，”age”:18</li><li>字符串（在双引号中）:例如，”name”:”王钢蛋”</li><li>逻辑值（true 或 false）:JSON 布尔值可以是 true 或者 false，例如，”flag”:true</li><li>数组（在中括号中）:JSON 数组在中括号 <strong>[]</strong> 中书写，JSON 中数组值必须是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。数组可包含多个对象。</li><li>对象（在大括号中）:JSON 对象在大括号 <strong>{}</strong> 中书写，例如，{“data”:{“name”:”张三”,”age”:18}}</li><li>对象可以包含多个 <strong>key/value（键/值）</strong>对。key 必须是字符串，value 可以是合法的 JSON 数据类型（字符串, 数字, 对象, 数组, 布尔值或 null）。key 和 value 中使用冒号(:)分割。每个 key/value 对使用逗号(,)分割。</li><li>null：例如，“name”:null</li></ul><h3 id="JSON访问"><a href="#JSON访问" class="headerlink" title="JSON访问"></a>JSON访问</h3><h4 id="访问JSON对象"><a href="#访问JSON对象" class="headerlink" title="访问JSON对象"></a>访问JSON对象</h4><pre><code class="javascript">let str = &#39;&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;&#39;//将JSON格式的字符串转换成JSON对象let obj = JSON.parse(str)console.log(obj.name)console.log(obj.age)</code></pre><h4 id="访问JSON数组"><a href="#访问JSON数组" class="headerlink" title="访问JSON数组"></a>访问JSON数组</h4><pre><code class="javascript">let ary = &#39;[&quot;google&quot;,&quot;baidu&quot;,&quot;sohu&quot;,&quot;sina&quot;]&#39;let obj = JSON.parse(ary);        console.log(obj[0]);console.log(obj[1]);</code></pre><h4 id="复杂情形"><a href="#复杂情形" class="headerlink" title="复杂情形"></a>复杂情形</h4><pre><code class="javascript">let str = &#39;&#123;&quot;students&quot;:[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:18&#125;,&#123;&quot;name&quot;:&quot;李四&quot;,&quot;age&quot;:18&#125;]&#125;&#39;let obj = JSON.parse(str);        let ary = obj.students;for(let i = 0;i&lt;ary.length;i++)&#123;    console.log(ary[i].name+&quot;============&quot;+ary[i].age);&#125;</code></pre><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON 通常用于与服务端交换数据。</p><p>在接收服务器数据时一般是字符串。</p><p>我们可以使用 JSON.parse() 方法将数据转换为 JavaScript 对象。</p>]]></content>
      
      
      <categories>
          
          <category> 知识组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/02/hello-world/"/>
      <url>/2022/07/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><span id="more"></span><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 问题组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎写的 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
